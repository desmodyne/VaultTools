#!/usr/bin/env bash

# build
#
# build all artifacts of this project
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-26


echo
echo 'build project artifacts'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_proj_root='../..'

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# path to script configuration file, relative to project root
# for .../cicd/bin/script, use .../cicd/conf/script.yaml conf file
path_to_conf_file="cicd/conf/$(basename "${BASH_SOURCE[0]}").yaml"

# TODO: shellcheck reports these to be unused
# https://github.com/koalaman/shellcheck/wiki/SC2034

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('dd-build-cont-images' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# NOTE: this only tests if library can be sourced;
# functions are only defined in "$(...)" subshell,
# so a second source for use in here is required
# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

# NOTE: ideally, these function calls would be something like e.g.
#   if ! output="$(configure_platform 2>&1)"
#     ...
# but on the one hand, they have their own output which should be displayed as
# it occurs and more importantly, any changes to global variables would only be
# effective in the subshell created by the braces around the function name and
# would be lost to this script, effectively rendering the function call useless

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute, canonical path to project root
path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

# absolute, canonical path to configuration file
path_to_conf_file="${path_to_proj_root}/${path_to_conf_file}"


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# BashLib is required in container; used by run script

# TODO: something creates a folder .../null and deletes it after build
# TODO: do this in a much better way
# TODO: get stuff from config

path_to_temp="${path_to_proj_root}/tmp/build"

echo -n 'create temporary folder: '
# shellcheck disable=SC2154
if output="$(mkdir -p "${path_to_temp}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "  ${output}"
    exit 1
fi

echo -n 'copy BashLib to temporary folder: '
# shellcheck disable=SC2154
if output="$(cp "${path_to_bashlib}" "${path_to_temp}/" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "  ${output}"
    exit 1
fi

# BashLib file usually has 0444 permissions;
# fails when running this script a second time

echo -n 'adjust BashLib file access permissions: '
# shellcheck disable=SC2154
if output="$(chmod 0644 "${path_to_temp}/dd-bash-lib.sh" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "  ${output}"
    exit 1
fi


conf_file="${path_to_conf_file}"

# https://github.com/koalaman/shellcheck/wiki/SC2154
# shellcheck disable=SC2154
if ! dd-build-cont-images "${conf_file}"; then exit 1; fi


echo 'project artifacts build complete'
echo
