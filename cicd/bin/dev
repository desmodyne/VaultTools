#!/usr/bin/env bash

# dev
#
# run this project in development mode
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-05-19


# NOTE: see build script for some possibly informative comments


echo
echo 'run project in dev mode'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
path_to_proj_root='../..'

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# path to script configuration file, relative to project root
path_to_conf_file="cicd/conf/$(basename "${BASH_SOURCE[0]}").yaml"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# absolute, canonical path to project root
path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

# absolute, canonical path to configuration file
path_to_conf_file="${path_to_proj_root}/${path_to_conf_file}"


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
if output="$(yq read "${path_to_conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
for attr in cont_caps cont_name cont_ports image_name log_since
do
    # https://unix.stackexchange.com/a/68349
    declare "${attr}"="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/41418
    if [ -z "${!attr}" ] || [ "${!attr}" = 'null' ]
    then
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# -----------------------------------------------------------------------------
# define functions: http://stackoverflow.com/a/6212408

function on_interrupt
{
    echo

    echo -n 'Stop vault container: '
    # shellcheck disable=SC2154
    if output="$(docker stop "${cont_name}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo -n 'Remove vault container: '
    if output="$(docker rm "${cont_name}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo
    echo 'project dev mode run complete'
    echo
}


# -----------------------------------------------------------------------------
# run database for this project

# call function upon CTRL-C
trap on_interrupt INT

# TODO: use arrays, not strings for running_conts and stopped_conts
# TODO: this duplicates code from DockerTools > code/bin/dd-run-cont-images
# TODO: possible container statuses:
# created, restarting, running, removing, paused, exited, or dead
# https://docs.docker.com/engine/reference/commandline/ps/#filtering

echo -n 'Get list of running containers: '
if output="$(docker ps --filter status=running --format '{{.Names}}' 2>&1)"
then
    echo 'OK'
    running_conts="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Get list of stopped containers: '
# NOTE: multiple filter statements are ORed, not ANDed
if output="$(docker ps --filter status=exited   \
                       --filter status=created  \
                       --format '{{.Names}}' 2>&1)"
then
    echo 'OK'
    stopped_conts="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# check if a container with that name is running
# NOTE: the usual simple approach fails for e.g. ci-postgres
# if they are part of another URI, e.g. ci-postgres-sonarqube
# https://stackoverflow.com/a/229606

cont_exists=false

for running_cont in ${running_conts}
do
# shellcheck disable=SC2154
    if [ "${running_cont}" = "${cont_name}" ]
    then
        cont_exists=true
        break
    fi
done

if [ "${cont_exists}" = true ]
then
    echo -n 'Stop running container: '
    if output="$(docker stop "${cont_name}" 2>&1)"
    then
        echo 'OK'
        # TODO: separation char ? newline ? space ?
        stopped_conts+=" ${cont_name}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# check if a container with that name exists
# TODO: other states than running or exited ?

cont_exists=false

for stopped_cont in ${stopped_conts}
do
    if [ "${stopped_cont}" = "${cont_name}" ]
    then
        cont_exists=true
        break
    fi
done

if [ "${cont_exists}" = true ]
then
    echo -n 'Remove existing container: '
    if output="$(docker rm "${cont_name}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# 'docker run' displays container ID if successful
echo -n 'Run vault container: '

# shellcheck disable=SC2154
if output="$(docker run --cap-add "${cont_caps}"   \
                        --detach                   \
                        --name    "${cont_name}"   \
                        --publish "${cont_ports}"  \
                        "${image_name}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo 'Follow vault container logs:'
echo
# shellcheck disable=SC2154
docker logs --follow --since "${log_since}" "${cont_name}"

# NOTE: anything after here is done in CTRL-C handler
