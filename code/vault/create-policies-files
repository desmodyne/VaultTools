#!/usr/bin/env bash

# create-policies-files
#
# generate configuration files for vault policies in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


echo
echo 'Create HashiCorp Vault policy files'
echo


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq -j r "${config_file}")"

path_to_sec_loc="$(    jq -r '.path_to_sec_loc'     <<< "${config}")"
path_to_tmpl_folder="$(jq -r '.path_to_tmpl_folder' <<< "${config}")"
policies_folder="$(    jq -r '.policies_folder'     <<< "${config}")"

# compound configuration sections
secrets_json="$(       jq -r '.secrets'             <<< "${config}")"

# TODO: review jq exprs to make these scalable beyond one path

# json data structure with secrets for each service
serv_secrets="$(jq '.[] | select(.context=="service")' <<< "${secrets_json}")"

# json data structure with secrets for each user
user_secrets="$(jq '.[] | select(.context=="user")'    <<< "${secrets_json}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# name of service policy template file
serv_tmpl_file_name='service_policy.hcl.j2'

# name of service template data template file
serv_tmpl_data_tmpl_name='service_policy_tmpl.json.j2'

# name of user policy template file
user_tmpl_file_name='user_policy.hcl.j2'

# name of user template data template file
user_tmpl_data_tmpl_name='user_policy_tmpl.json.j2'

# TODO: req'd for defunct curl call
# policy request data template
# read -r -d '' policy_req_data_tmpl <<'EOT'
# {
#     "policy": "path \\"%s\\""
# }
# EOT

# full path to folder with policies configuration files
path_to_policies_folder="${path_to_sec_loc}/${policies_folder}"


# -----------------------------------------------------------------------------
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# create policies configuration file


# TODO: only do this if any services or users are configured

if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "failed to pushd to project root ${path_to_project_root}"
    exit
fi


if [ ! -d "${path_to_policies_folder}" ]
then
    echo -n 'create policies configuration folder: '
    if output="$(mkdir -p "${path_to_policies_folder}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# TODO: continue or exit ?

if [ -z "${serv_secrets}" ]
then
    echo 'no services configured; skip creating service policy files'
else
    serv_names="$(jq -r '.sec_confs[].path' <<< "${serv_secrets}" | xargs)"
fi

for serv_name in ${serv_names}
do
    echo "service ${serv_name}:"

    path_to_conf_file="${path_to_policies_folder}/${serv_name}.hcl"

    echo -n '  render template data template: '
    # j2 --format env requires export
    export serv_name="${serv_name}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${serv_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
    export serv_name=

    echo -n '  create policies configuration file: '

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${serv_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_conf_file}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file created: ${path_to_conf_file}"
done


if [ -z "${user_secrets}" ]
then
    echo 'no users configured; skip creating user policy files'
else
    user_names="$(jq -r '.sec_confs[].path' <<< "${user_secrets}" | xargs)"
fi

for user_name in ${user_names}
do
    echo "user ${user_name}:"

    path_to_conf_file="${path_to_policies_folder}/${user_name}.hcl"

    echo -n '  render template data template: '
    # j2 --format env requires export
    export user_name="${user_name}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${user_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
    export user_name=

    echo -n '  create policies configuration file: '

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${user_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_conf_file}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file created: ${path_to_conf_file}"
done


if ! popd > /dev/null
then
    echo "failed to popd from project root ${path_to_project_root}"
    exit
fi


echo
echo 'HashiCorp Vault policy file creation complete'
echo
