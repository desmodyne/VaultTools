#!/usr/bin/env bash

# extract-secrets
#
# scan directory for secrets and mirror the files that contain them
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-07-06


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        grep='ggrep'
        sed='gsed'
        ;;
    linux-*)
        grep='grep'
        sed='sed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit 1
        ;;
esac


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# path to root folder of location to scan, relative to project root
# TODO: get this in as cmd line argument
# TODO: scan entire source project folder
source_folder='../desmodyne'
# source_folder='../desmodyne/environments/development'

# path to folder where secrets files are mirrored, relative to project root
path_to_mirror_folder='data/mirror'

# regex for strings that indicate secrets
secrets_regex='API_KEY|PASSWORD|USERNAME'

# regex for a <secret path>:<secret name>=<secret value> line
line_regex='([^ ]+):([0-9]+):[ -]*([A-Z_]+)=([^ ]+)$'


# -----------------------------------------------------------------------------
# build basic Docker images


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "Failed to pushd to project root ${path_to_project_root}"
    exit
fi


echo -n 'scan for lines that possibly contain secrets: '
# NOTE: macOS / BSD grep returns 2 in some cases, possibly when error messages
# were suppressed using -s; GNU grep returns 0 - and also is a lot faster...
# NOTE: if source_folder doesn't exist, BSD grep fails without error message
# TODO: need to pass -s to ignore broken (?) symlink .../app/web/index.php
if output="$("${grep}" -EHnrs "${secrets_regex}" "${source_folder}" 2>&1)"
then
    echo 'OK'
    grep_output="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo 'extract location and secret:'

OLD_IFS="${IFS}" && IFS=$'\n'

for line in ${grep_output}
do
    if "${grep}" -Eq "${line_regex}" <<< "${line}"
    then
        source_path="$( "${sed}" -E "s|${line_regex}|\1|g" <<< "${line}")"
        source_line="$( "${sed}" -E "s|${line_regex}|\2|g" <<< "${line}")"
        secret_name="$( "${sed}" -E "s|${line_regex}|\3|g" <<< "${line}")"
        secret_value="$("${sed}" -E "s|${line_regex}|\4|g" <<< "${line}")"

        path_into_project="${source_path#$source_folder}"
        # TODO: need to remove leading / - do this in one line ?
        path_into_project="$(dirname  "${path_into_project:1}")"
        target_filename="$(  basename "${source_path}")"

        echo "secret location : ${source_path}:${source_line}"
        echo "secret name     : ${secret_name}"
        echo "secret value    : ${secret_value}"

        output_folder="${path_to_mirror_folder}/${path_into_project}"
        output_path="${output_folder}/${target_filename}"
        mkdir -p "${output_folder}"
        touch "${output_path}"

        if grep -q "${secret_name}=${secret_value}" "${output_path}"
        then
            echo 'secret exists'
        else
            echo "${secret_name}=${secret_value}" >> "${output_path}"
            echo 'secret added'
        fi

        echo
    fi

done

IFS="${OLD_IFS}"


if ! popd > /dev/null
then
    echo "Failed to popd from project root ${path_to_project_root}"
    exit
fi
