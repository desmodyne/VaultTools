#!/usr/bin/env bash

# upload-users
#
# create users on the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/api/auth/userpass/index.html


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_address="$(   yq r - vault_address    <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"
users_folder="$(    yq r - users_folder     <<< "${config}")"
placeholder="$(     yq r - placeholder      <<< "${config}")"

# TODO: yq fails to support accessing substructures, so use jq
users_json="$(      yq -j r - users         <<< "${config}")"


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
# upload users

echo -n 'Get vault status: '

# NOTE: from vault status --help:
#   The exit code reflects the seal status:
#       - 0 - unsealed
#       - 1 - error
#       - 2 - sealed

output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
elif [ "${res}" = 1 ]
then
    echo 'ERROR'
    echo "${output}"
    exit "${res}"
else
    echo 'OK'
    echo "Vault at ${vault_address} is sealed; please unseal and try again"
    exit "${res}"
fi


root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'Log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# https://www.vaultproject.io/api/system/auth.html

# TODO: set up userpass auth method in the same way as approle
# TODO: the http api call does not return a response,
# but a godawful mess of data, most of it duplicate:
# https://stackoverflow.com/q/48904371
# if output="$(curl --header "X-Vault-Token: ${root_token}" \
#                   --show-error                            \
#                   --silent                                \
#                   "${vault_address}/v1/sys/auth" 2>&1)"

# TODO: from https://stackoverflow.com/a/48904944:
# jq -r '. as $o | keys[] | select(endswith("/")) | $o[.].type' <<< "${output}"

# https://www.vaultproject.io/docs/commands/auth/list.html

# TODO: any combination of this fails with
# flag provided but not defined: -format
# vault auth list -detailed -format json

# TODO: does output contain control characters ?

# sample output:
#
# Path         Type        Description
# ----         ----        -----------
# token/       token       token based credentials
# userpass/    userpass    n/a

echo -n 'Get enabled auth methods: '
if output="$(vault auth list -address="${vault_address}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

auth_lines="$(tail -n +3 <<< "${output}")"
auth_methods=''

OLD_IFS="${IFS}" && IFS=$'\n'

for auth_line in ${auth_lines}
do
    # TODO: align code, do this with array
    auth_meth="$("${sed}" -e 's|.*  \([a-z]\+\)  .*|\1|g' <<< "${auth_line}")"
    auth_methods+="${auth_meth} "
done

IFS="${OLD_IFS}"

auth_methods="${auth_methods%% }"

echo -n 'Enable userpass auth method: '

if [[ "${auth_methods}" == *userpass* ]]
then
    echo 'already enabled'
else
    if output="$(vault auth enable -address="${vault_address}" userpass 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi


if [ "${users_json}" != 'null' ]
then
    usernames="$(jq -r '.[].name' <<< "${users_json}" | xargs)"
fi

for username in ${usernames}
do
    path_to_conf_file="${path_to_sec_loc}/${users_folder}/${username}.json"

    echo -n "Upload user ${username}: "

    # TODO: error handling, e.g. file does not exist
    password="$(jq -r '.password' "${path_to_conf_file}")"
    if [ "${password}" = "${placeholder}" ]
    then
        echo 'user password has not been set'
        continue
    fi

    # TODO: vault error message is garbled when file does not exist, e.g.
    # ERROR
    # Warning: Couldn't read data from file
    # Warning: "/Volumes/VAULT/Corporate/DesmoDyne/Secrets/vault.desmodyne.c
    # Warning: om/users/test.json", this makes an empty POST.
    # {"errors":["missing password"]}

    # TODO: test if user exists and output 'overwriting' message
    if output="$(curl --data  @"${path_to_conf_file}"         \
                      --header "X-Vault-Token: ${root_token}" \
                      --request POST                          \
                      --show-error                            \
                      --silent                                \
                  "${vault_address}/v1/auth/userpass/users/${username}" 2>&1)"
    then
        # if successful, curl returns 0 and output is empty
        if [ -z "${output}" ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            # sample output:
            # {"errors":["1 error occurred:\n\n* permission denied"]}
            if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
            then
                echo "${errors}"
            else
                echo "${output}"
            fi
            exit 1
        fi
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done
