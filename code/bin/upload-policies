#!/usr/bin/env bash

# upload-policies
#
# create policies on the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/intro/getting-started/policies.html
# https://www.vaultproject.io/docs/concepts/policies.html
# https://www.vaultproject.io/guides/configuration/policies.html


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_address="$(   yq r - vault_address    <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"
policies_folder="$( yq r - policies_folder  <<< "${config}")"

# TODO: yq fails to support accessing substructures, so use jq
services_json="$(   yq -j r - services      <<< "${config}")"
users_json="$(      yq -j r - users         <<< "${config}")"


# -----------------------------------------------------------------------------
# configure script parameters

# TODO: req'd for defunct curl call
# policy request data template
# read -r -d '' policy_req_data_tmpl <<'EOT'
# {
#     "policy": "path \\"%s\\""
# }
# EOT

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
# upload policies

echo -n 'Get vault status: '

# NOTE: from vault status --help:
#   The exit code reflects the seal status:
#       - 0 - unsealed
#       - 1 - error
#       - 2 - sealed

output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
elif [ "${res}" = 1 ]
then
    echo 'ERROR'
    echo "${output}"
    exit "${res}"
else
    echo 'OK'
    echo "Vault at ${vault_address} is sealed; please unseal and try again"
    exit "${res}"
fi


root_token="$(jq -r '.root_token' "${path_to_key_file}")"

# TODO: this fails, address is ignored
# if output="$(vault login "${root_token}" -address="${vault_address}" 2>&1)"

echo -n 'Log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


if [ "${services_json}" != 'null' ]
then
    service_names="$(jq -r '.[].name' <<< "${services_json}" | xargs)"
fi

for service_name in ${service_names}
do
    path_to_conf_file="${path_to_sec_loc}/${policies_folder}/${service_name}.hcl"

    echo "Upload policies for service ${service_name}:"

    echo -n 'Create / update policy: '
    if output="$(vault policy write -address="${vault_address}" \
                       "${service_name}" "${path_to_conf_file}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done

if [ "${users_json}" != 'null' ]
then
    usernames="$(jq -r '.[].name' <<< "${users_json}" | xargs)"
fi

for username in ${usernames}
do
    path_to_conf_file="${path_to_sec_loc}/${policies_folder}/${username}.hcl"

    echo "Upload policies for user ${username}:"

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    # TODO: official documentation is absolutely useless:
    # https://www.vaultproject.io/api/system/policy.html
    #
    # TODO: this fails with
    #   Failed to parse policy: At 1:77: key 'path "/Volumes/VAULT/ ...
    #    ... secrets/DesmoDyne/vault.desmodyne.com/policies/ssc.hcl"' ...
    #    ... expected start of object ('{') or assignment ('=')
    #
    # if output="$(curl --data   "${policy_req_data}"           \
    #                   --header "X-Vault-Token: ${root_token}" \
    #                   --request POST                          \
    #                   --show-error                            \
    #                   --silent                                \
    #               "${vault_address}/v1/sys/policy/${username}" 2>&1)"
    # then
    #     # if successful, curl returns 0 and output is empty
    #     if [ -z "${output}" ]
    #     then
    #         echo 'OK'
    #     else
    #         echo 'ERROR'
    #         # sample output:
    #         # {"errors":["1 error occurred:\n\n* permission denied"]}
    #         if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
    #         then
    #             echo "${errors}"
    #         else
    #             echo "${output}"
    #         fi
    #         exit 1
    #     fi
    # fi
    #
    # contents of policy_req_data:
    # {
    #     "policy": "path \"/Volumes/VAULT/secrets/DesmoDyne/ ...
    #                        ... vault.desmodyne.com/policies/ssc.hcl\""
    # }
    #
    # TODO: Vault doesn't really seem to have their minds up on how to do this:
    # from https://www.vaultproject.io/intro/ ...
    #       ... getting-started/policies.html#writing-the-policy:
    #   vault policy write my-policy acl.hcl
    # from https://www.vaultproject.io/api/ ...
    #       ... system/policy.html#create-update-policy:
    #   vault write sys/policy/my-policy policy=@my-policy.hcl

    echo -n 'Create / update policy: '
    if output="$(vault policy write -address="${vault_address}" \
                       "${username}" "${path_to_conf_file}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done
