#!/usr/bin/env bash

# configure-vault
#
# configure the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/docs/audit/file.html

# NOTE: see also init-vault for more information


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        sed='gsed'
        ;;
    linux-*)
        sed='sed'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_address="$(   yq r - vault_address    <<< "${config}")"
path_to_log_file="$(yq r - path_to_log_file <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
# set up vault

echo -n 'Get vault status: '

# NOTE: from vault status --help:
#   The exit code reflects the seal status:
#       - 0 - unsealed
#       - 1 - error
#       - 2 - sealed

output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
elif [ "${res}" = 1 ]
then
    echo 'ERROR'
    echo "${output}"
    exit "${res}"
else
    echo 'OK'
fi

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'Log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# TODO: just like in set-up-users,
# any combination of this fails with
# flag provided but not defined: -format
# vault audit list -detailed -format json

echo -n 'Get audit devices: '
if output="$(vault audit list -address="${vault_address}" -detailed 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Set up vault log file: '

# sample output:
# Path     Type    Description    Replication    Options
# ----     ----    -----------    -----------    -------
# file/    file    n/a            replicated     file_path=/var/log/vault/audit.log

audit_lines="$(tail -n +3 <<< "${output}")"

OLD_IFS="${IFS}" && IFS=$'\n'

for audit_line in ${audit_lines}
do
    # output contains control characters
    # https://unix.stackexchange.com/a/96485
    clean_line="$(tail -n 1 <<< "${audit_line}" \
                 | "${sed}" -r "s|\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]||g")"

    IFS="${OLD_IFS}"
    # https://stackoverflow.com/a/13402368
    # NOTE: word splitting is intended here
    # shellcheck disable=SC2206
    attributes=(${clean_line})
    OLD_IFS="${IFS}" && IFS=$'\n'

    if [ "${attributes[1]}" = 'file' ] && \
       [ "${attributes[4]}" = "file_path=${path_to_log_file}" ]
    then
        # TODO: support re-setting to new log file path ?
        echo 'already set up'
        exit 0
    fi
done

IFS="${OLD_IFS}"

if output="$(vault audit enable -address="${vault_address}" \
                         file file_path="${path_to_log_file}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi
