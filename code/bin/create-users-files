#!/usr/bin/env bash

# create-users-files
#
# generate configuration files for vault users in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-20


echo
echo 'Create HashiCorp Vault user files'
echo


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if path_to_sec_loc is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
# TODO: this works with yq 1.15.0, but fails with yq 2.x.y;
# on macOS, use e.g. brew switch yq 1.15.0 to downgrade:
# https://stackoverflow.com/a/4158763
config="$(yq -j r "${config_file}")"

path_to_sec_loc="$(    jq -r '.path_to_sec_loc'     <<< "${config}")"
path_to_tmpl_folder="$(jq -r '.path_to_tmpl_folder' <<< "${config}")"
users_folder="$(       jq -r '.users_folder'        <<< "${config}")"
placeholder="$(        jq -r '.placeholder'         <<< "${config}")"

# compound configuration sections
users_json="$(         jq -r '.users'               <<< "${config}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# name of template file
tmpl_file_name='user.json.j2'

# full path to folder with user configuration files
path_to_users_folder="${path_to_sec_loc}/${users_folder}"


# -----------------------------------------------------------------------------
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# create users configuration file


if [ "${users_json}" = 'null' ]
then
    echo 'no users configured; skip creating user files'
    echo
    echo 'HashiCorp Vault user file creation complete'
    echo
    exit
else
    usernames="$(jq -r '.[].name' <<< "${users_json}" | xargs)"
fi


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "failed to pushd to project root ${path_to_project_root}"
    exit
fi


if [ ! -d "${path_to_users_folder}" ]
then
    echo -n 'create users configuration folder: '
    if output="$(mkdir -p "${path_to_users_folder}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# TODO: continue or exit ?

for username in ${usernames}
do
    echo "user ${username}:"

    policies="$(jq -r ".[] | select(.name == \"${username}\").policies[]" \
                  <<< "${users_json}" | xargs | sed -e 's| |,|g')"

    # append policy for regular users
    if [ "${username}" != 'root' ]
    then
        policies+=",${username}"
    fi

    path_to_conf_file="${path_to_users_folder}/${username}.json"
    path_to_temp_file="${path_to_users_folder}/${username}.json.temp"

    # attempt to get password from existing file
    if [ -f "${path_to_conf_file}" ]
    then
        if output="$(jq -r '.password' "${path_to_conf_file}" 2>&1)"
        then
            existing_password="${output}"
        fi
    fi

    echo -n '  create user configuration file: '

    # j2 --format env requires export
    # if an existing password was found, use it; otherwise, use placeholder
    # https://www.tldp.org/LDP/abs/html/parameter-substitution.html
    export password="${existing_password:-$placeholder}"
    export policies="${policies}"

    if output="$(j2 --format env \
                    "${path_to_tmpl_folder}/${tmpl_file_name}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_temp_file}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
    export password=
    export policies=

    # move temp file to conf file
    if ! output="$(mv "${path_to_temp_file}" "${path_to_conf_file}" 2>&1)"
    then
        echo "  ${output}"
        exit 1
    fi

    echo "  file created: ${path_to_conf_file}"
done


if ! popd > /dev/null
then
    echo "failed to popd from project root ${path_to_project_root}"
    exit
fi


echo
echo 'HashiCorp Vault user file creation complete'
echo
