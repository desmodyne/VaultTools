#!/usr/bin/env bash

# create-users-files
#
# generate configuration files for vault users in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-20


# NOTE: see also init-vault for more information


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        xargs='gxargs'
        ;;
    linux-*)
        xargs='xargs'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if path_to_sec_loc is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

path_to_sec_loc="$(yq r - path_to_sec_loc <<< "${config}")"
users_folder="$(   yq r - users_folder    <<< "${config}")"
placeholder="$(    yq r - placeholder     <<< "${config}")"

# TODO: yq fails to support accessing substructures, so use jq
# TODO: this works with yq 1.15.0, but fails with yq 2.x.y;
# on macOS, use e.g. brew switch yq 1.15.0 to downgrade:
# https://stackoverflow.com/a/4158763
users_json="$(     yq -j r - users        <<< "${config}")"


# -----------------------------------------------------------------------------
# validate config settings

echo -n 'Validate configuration settings: '

if [ -e "${path_to_sec_loc}" ]
then
    if [ -d "${path_to_sec_loc}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path exists, but is not a directory:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
else
    # https://github.com/koalaman/shellcheck/wiki/SC2207
    mapfile -t array < \
        <("${xargs}" -n 1 -d '/' <<< "${path_to_sec_loc}" | "${xargs}")

    if [ -d "/${array[0]}/${array[1]}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path to secure location is not mounted:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# path to folder with templates, relative to project root
path_to_tmpl_folder='data/tmpl'

# name of template file
tmpl_file_name='user.json.j2'

# full path to folder with user configuration files
path_to_users_folder="${path_to_sec_loc}/${users_folder}"


# -----------------------------------------------------------------------------
# create users configuration file


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "Failed to pushd to project root ${path_to_project_root}"
    exit
fi


# see also init-vault for some more information

echo -n 'Verify secure location is under version control: '
if output="$(git -C "${path_to_sec_loc}" rev-parse --git-dir)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# if the repo is not clean to prevent overwriting changes
echo -n 'Verify secure location repository status: '
if output="$(git -C "${path_to_sec_loc}" status --porcelain)"
then

    if [ -z "${output}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo 'Repository has uncommitted changes:'
        echo "${output}"
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

if [ ! -d "${path_to_users_folder}" ]
then
    echo -n 'Create users configuration folder: '
    if output="$(mkdir -p "${path_to_users_folder}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# TODO: continue or exit ?

if [ "${users_json}" != 'null' ]
then
    usernames="$(jq -r '.[].name' <<< "${users_json}" | xargs)"
fi

for username in ${usernames}
do
    policies="$(jq -r ".[] | select(.name == \"${username}\").policies[]" \
                  <<< "${users_json}" | xargs | sed -e 's| |,|g')"

    # append policy for regular users
    if [ "${username}" != 'root' ]
    then
        policies+=",${username}"
    fi

    path_to_conf_file="${path_to_users_folder}/${username}.json"
    path_to_temp_file="${path_to_users_folder}/${username}.json.temp"

    # TODO: align output with convention, in this and in all other scripts

    echo "${path_to_conf_file}"

    # attempt to get password from existing file
    if [ -f "${path_to_conf_file}" ]
    then
        if output="$(jq -r '.password' "${path_to_conf_file}" 2>&1)"
        then
            existing_password="${output}"
        fi
    fi

    echo -n "Create users configuration file: "

    # j2 --format env requires export
    # if an existing password was found, use it; otherwise, use placeholder
    # https://www.tldp.org/LDP/abs/html/parameter-substitution.html
    export password="${existing_password:-$placeholder}"
    export policies="${policies}"

    if output="$(j2 --format env \
                    "${path_to_tmpl_folder}/${tmpl_file_name}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_temp_file}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
    export password=
    export policies=
    echo

    # move temp file to conf file
    if ! output="$(mv "${path_to_temp_file}" "${path_to_conf_file}" 2>&1)"
    then
        echo "${output}"
        exit 1
    fi
done


if ! popd > /dev/null
then
    echo "Failed to popd from project root ${path_to_project_root}"
    exit
fi
