#!/usr/bin/env bash

# seal-vault
#
# close vault so users can no longer log in nor read / write secrets
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-19


# https://www.vaultproject.io/api/system/seal.html


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_address="$(  yq r - vault_address   <<< "${config}")"
path_to_sec_loc="$(yq r - path_to_sec_loc <<< "${config}")"
key_file_name="$(  yq r - key_file_name   <<< "${config}")"


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "Vault at ${vault_address} is already sealed"
        ;;
    3)  echo "Vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit
fi


# -----------------------------------------------------------------------------
# seal vault

# TODO: can this be done with a user token obtained by login ?
root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'Seal vault: '
if output="$(curl --header "X-Vault-Token: ${root_token}" \
                  --request PUT                           \
                  --show-error                            \
                  --silent                                \
                  "${vault_address}/v1/sys/seal" 2>&1)"
then
    # if successful, curl returns 0 and output is empty
    if [ -z "${output}" ]
    then
        echo 'OK'
        echo 'Vault has been sealed'
        exit 0
    else
        echo 'ERROR'
        # sample output:
        # {"errors":["1 error occurred:\n\n* permission denied"]}
        if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi
