#!/usr/bin/env bash

# build-vault
#
# initialize and configure a vault instance and add users, policies and secrets
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-23


echo
echo 'Build HashiCorp Vault instance'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# alphabetical list of tools called by this script
req_tools='configure-vault init-vault unseal-vault '
req_tools+='create-policies-files create-secrets-files create-users-files '
req_tools+='set-up-auth-approles '
req_tools+='upload-policies upload-secrets upload-users'


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# TODO: review path to library
source vault.lib

if ! determine_platform;            then exit 1; fi
# pass all arguments to this script
# on to sub script unchanged:
# https://stackoverflow.com/a/3816747
if ! proc_cmd_line_args "$@";       then exit 1; fi
if ! determine_path_to_sub_scripts; then exit 1; fi


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# TODO: review error handling (use trap with error function ?)
# TODO: must a vault be unsealed for setup ?
# TODO: with a new vault and a clean repo, this script should run without error
# TODO: set up global convention if cURL / REST API ./. command line client
# TODO: globally, use root token only where absolutely required:
# https://www.vaultproject.io/guides/identity/authentication.html#policy-requirements
# TODO: for all scripts that log into vault: revoke root token afterwards
# TODO: validate configuration settings in set-up-* scripts
# TODO: set up unit-testing:
# https://medium.com/@pimterry/testing-your-shell-scripts-with-bats-abfca9bdc5b9
# TODO: refactor various template approaches to using jq:
# https://github.com/stedolan/jq/wiki/Cookbook#using-jq-variables-as-template-variables
# TODO: move enabling userpass auth method from upload-users to configure-vault
# TODO: streamline adding new users:
#  + call file generation scripts from build-vault
#  + overwrite existing files only if some cmd line flag is passed
#  + generate passwords instead of using placeholder (unless cmd line param)
#  + get list of users from Ansible playbook configuration
#  + same for PKI: overwrite existing files only if cmd line flag is passed
#  + refine git check to support generating all files for one user
# TODO: review [ == ] string comparison: https://stackoverflow.com/a/2237103
# TODO: remove plural from create-users-files, create-policies-files (?)
# TODO: review quoting string with and without variables
# TODO: run clear-vault and seal-vault as part of this ?


if ! init-vault            "${config_file}"; then exit 1; fi
if ! unseal-vault          "${config_file}"; then exit 1; fi
if ! configure-vault       "${config_file}"; then exit 1; fi
if ! create-users-files    "${config_file}"; then exit 1; fi
if ! create-policies-files "${config_file}"; then exit 1; fi
if ! create-secrets-files  "${config_file}"; then exit 1; fi
if ! upload-users          "${config_file}"; then exit 1; fi
if ! upload-policies       "${config_file}"; then exit 1; fi
if ! upload-secrets        "${config_file}"; then exit 1; fi
if ! set-up-auth-approles  "${config_file}"; then exit 1; fi


echo
echo 'HashiCorp Vault instance build complete'
echo
