#!/usr/bin/env bash

# build-vault
#
# initialize and configure a vault instance and add users, policies and secrets
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-23


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        ;;
    linux-*)
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# alphabetical list of tools called by this script
req_tools='configure-vault init-vault unseal-vault '
req_tools+='create-policies-files create-secrets-files create-users-files '
req_tools+='set-up-auth-approles '
req_tools+='upload-policies upload-secrets upload-users'


# -----------------------------------------------------------------------------
# determine path to other scripts in this project

# In production, all related scripts are installed using a distribution package
# and any (related or other, e.g. Linux system) tools are found in PATH;
# during development, this is not necessarily the case: Test if all tools are
# found and if one is missing, append the path this script resides in to PATH
# and retry. This does not mix package / production and development versions,
# either all related scripts are taken from PATH or all are taken from local.

# TODO: align output

amended_path=false

echo 'determine path to sub scripts:'

for req_tool in ${req_tools}
do
    # https://stackoverflow.com/a/677212
    # https://github.com/koalaman/shellcheck/wiki/SC2230
    echo -n "  ${req_tool}: "
    if [ -x "$(command -v "${req_tool}")" ]
    then
        echo 'OK'
    else
        echo 'No such file or directory'
        PATH="${path_to_this_script}:${PATH}"
        amended_path=true
        break
    fi
done

if [ "${amended_path}" = true ]
then
    echo 'amend PATH and retry:'
    for req_tool in ${req_tools}
    do
        echo -n "  ${req_tool}: "
        if [ -x "$(command -v "${req_tool}")" ]
        then
            echo 'OK'
        else
            echo 'No such file or directory'
            exit 1
        fi
    done
fi

echo


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# TODO: review error handling (use trap with error function ?)
# TODO: must a vault be unsealed for setup ?
# TODO: with a new vault and a clean repo, this script should run without error
# TODO: set up global convention if cURL / REST API ./. command line client
# TODO: globally, use root token only where absolutely required:
# https://www.vaultproject.io/guides/identity/authentication.html#policy-requirements

if ! init-vault            "${config_file}"; then exit 1; fi
if ! unseal-vault          "${config_file}"; then exit 1; fi
if ! configure-vault       "${config_file}"; then exit 1; fi
if ! create-users-files    "${config_file}"; then exit 1; fi
if ! create-policies-files "${config_file}"; then exit 1; fi
if ! create-secrets-files  "${config_file}"; then exit 1; fi
if ! upload-users          "${config_file}"; then exit 1; fi
if ! upload-policies       "${config_file}"; then exit 1; fi
if ! upload-secrets        "${config_file}"; then exit 1; fi
if ! set-up-auth-approles  "${config_file}"; then exit 1; fi
