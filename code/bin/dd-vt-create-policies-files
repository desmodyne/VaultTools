#!/usr/bin/env bash

# dd-vt-create-policies-files
#
# generate configuration files for vault policies in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# NOTE: see also dd-vt-init-vault


echo
echo 'Create HashiCorp Vault policy files'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'j2' 'vault' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# conf_file is defined by get_conf_file_arg
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
for attr in path_to_sec_loc path_to_tmpl_folder \
            policies_folder secrets
do
    # https://unix.stackexchange.com/a/68349
    declare "${attr}"="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/41418
    if [ -z "${!attr}" ] || [ "${!attr}" = 'null' ]
    then
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# TODO: review jq exprs to make these scalable beyond one path

# json data structure with secrets for each service
serv_secrets="$(jq '.[] | select(.context=="service")' <<< "${secrets}")"

# json data structure with secrets for each user
user_secrets="$(jq '.[] | select(.context=="user")'    <<< "${secrets}")"


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to root folder for policies configuration files
path_to_policies_root="${path_to_sec_loc}/${policies_folder}"

# TODO: get these from conf

# name of service policy template file
serv_tmpl_file_name='service_policy.hcl.j2'

# name of service template data template file
serv_tmpl_data_tmpl_name='service_policy_tmpl.json.j2'

# name of user policy template file
user_tmpl_file_name='user_policy.hcl.j2'

# name of user template data template file
user_tmpl_data_tmpl_name='user_policy_tmpl.json.j2'

# TODO: req'd for defunct curl call
# policy request data template
# read -r -d '' policy_req_data_tmpl <<'EOT'
# {
#     "policy": "path \\"%s\\""
# }
# EOT


# -----------------------------------------------------------------------------
# create policies configuration file


# TODO: only do this if any services or users are configured

# TODO: continue or exit ?

if [ -z "${serv_secrets}" ]
then
    echo 'no services configured; skip creating service policy files'
else
    serv_names="$(jq -r '.sec_confs[].path' <<< "${serv_secrets}" | xargs)"
fi

# NOTE: serv_name possibly contains a path component
# TODO: if serv_name has a path component, the name does not match the function
for serv_name in ${serv_names}
do
    echo "service ${serv_name}:"

    path_to_conf_file="${path_to_policies_root}/${serv_name}.hcl"

    echo -n '  render service policy template data template: '
    # j2 --format env requires export
    export serv_name="${serv_name}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${serv_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
    export serv_name=

    echo -n '  render service policy template: '

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${serv_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        policy_conf="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    path_to_policies_folder="$(dirname "${path_to_conf_file}")"

    if [ ! -d "${path_to_policies_folder}" ]
    then
        echo -n '  create service policy configuration folder: '
        if output="$(mkdir -p "${path_to_policies_folder}" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi
    fi

    echo -n '  create service policy configuration file: '

    if output="$(echo "${policy_conf}" 2>&1 > "${path_to_conf_file}")"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file created: ${path_to_conf_file}"
done


# TODO: used to debug, remove this:
# echo "user_secrets: ${user_secrets}"

if [ -z "${user_secrets}" ]
then
    echo 'no users configured; skip creating user policy files'
else
    # TODO: FIX THIS: iterating over path and assigning to user names ?!?
    user_names="$(jq -r '.sec_confs[].path' <<< "${user_secrets}" | xargs)"
    if [ "${user_names}" = 'null' ]
    then
        user_names=''
    fi
fi

for user_name in ${user_names}
do
    echo "user ${user_name}:"

    path_to_conf_file="${path_to_policies_root}/${user_name}.hcl"

    echo -n '  render user policy template data template: '
    export user_name="${user_name}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${user_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
    export user_name=

    echo -n '  render user policy template: '

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${user_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        policy_conf="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    path_to_policies_folder="$(dirname "${path_to_conf_file}")"

    if [ ! -d "${path_to_policies_folder}" ]
    then
        echo -n '  create user policy configuration folder: '
        if output="$(mkdir -p "${path_to_policies_folder}" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi
    fi

    echo -n '  create user policy configuration file: '

    if output="$(echo "${policy_conf}" 2>&1 > "${path_to_conf_file}")"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file created: ${path_to_conf_file}"
done


echo
echo 'HashiCorp Vault policy file creation complete'
echo
