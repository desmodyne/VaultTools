#!/usr/bin/env bash

# dd-vt-seal-vault
#
# close vault so users can no longer log in nor read / write secrets
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-19


echo
echo 'Seal HashiCorp Vault'
echo


# https://www.vaultproject.io/api/system/seal.html


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source dd-vt-vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq -j r "${config_file}")"

vault_address="$(  jq -r '.vault_address'   <<< "${config}")"
path_to_sec_loc="$(jq -r '.path_to_sec_loc' <<< "${config}")"
key_file_name="$(  jq -r '.key_file_name'   <<< "${config}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is already sealed"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# seal vault


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "failed to pushd to project root ${path_to_project_root}"
    exit
fi


# TODO: can this be done with a user token obtained by login ?
root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'seal vault: '
if output="$(curl --header "X-Vault-Token: ${root_token}" \
                  --request PUT                           \
                  --show-error                            \
                  --silent                                \
                  "${vault_address}/v1/sys/seal" 2>&1)"
then
    # if successful, curl returns 0 and output is empty
    if [ -z "${output}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        # sample output:
        # {"errors":["1 error occurred:\n\n* permission denied"]}
        if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


if ! popd > /dev/null
then
    echo "failed to popd from project root ${path_to_project_root}"
    exit
fi


echo
echo 'HashiCorp Vault seal complete'
echo
