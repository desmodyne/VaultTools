#!/usr/bin/env bash

# dd-vt-upload-policies
#
# upload (i.e. set up) policies to (on) a vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/intro/getting-started/policies.html
# https://www.vaultproject.io/docs/concepts/policies.html
# https://www.vaultproject.io/guides/configuration/policies.html

# NOTE: see also dd-vt-init-vault


echo
echo 'Upload HashiCorp Vault policies'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# name of jinja tmpl file to turn json into hcl, located in
# path_to_tmpl_root as returned by dd-vt-get-template-path
name_of_j2h_tmpl='json_2_hcl.j2'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'dd-vt-get-template-path' 'jinja2' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# NOTE: deviating from alphabetical order conv for consistency in
# dd-vt-upload-methods, dd-vt-upload-policies and dd-vt-upload-secrets
# shellcheck disable=SC2034
attrs=(key_file_name path_to_sec_loc vault_host
       policies policies_dir_path policies_url_path)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'

# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  # shellcheck disable=SC2154
        echo "vault at ${vault_host} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_host} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload policies

# shellcheck disable=SC2154
if [ -z "${policies}" ] || [ "${policies}" = 'null' ]
then
    echo 'no policies configured'
    echo
    echo 'HashiCorp Vault policies upload complete'
    echo
    exit
else
    mapfile -t policy_paths < <(jq -r '.[].path' <<< "${policies}")
fi

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'get own configuration template root path: '
if output="$(dd-vt-get-template-path 2>&1)"
then
    echo 'OK'
    path_to_tmpl_root="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# absolute path to template to turn json into hcl
path_to_j2h_tmpl="${path_to_tmpl_root}/${name_of_j2h_tmpl}"

echo
echo 'process policies:'
echo
echo "  local policies dir path : ${path_to_sec_loc}/${policies_dir_path}"
echo "  vault policies url path : ${vault_host}/${policies_url_path}"

for policy_path in "${policy_paths[@]}"
do
    echo

    jq_expr=".[] | select(.path == \"${policy_path}\")"
    policy_conf="$(jq "${jq_expr}" <<< "${policies}")"

    policy_file="$(jq -r '.file' <<< "${policy_conf}")"
    path_to_policy_file="${path_to_sec_loc}/${policies_dir_path}/${policy_file}"

    if [ ! -e "${path_to_policy_file}" ]
    then
        echo '  ERROR: policy conf file does not exist:'
        echo "    ${path_to_policy_file}"
        exit 1
    fi

    echo -n "  load policy conf from file at : ${policy_file}: "
    if output="$(yq read "${path_to_policy_file}" --tojson 2>&1)"
    then
        echo 'OK'
        policy_json="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    # NOTE: official HashiCorp Vault docs are pretty useless when it comes to
    # defining what Vault exactly expects when uploading a policy; they just
    # mention 'policy document' and provide examples (using HCL), but do not
    # actally document what a policy document looks like or may contain:
    # https://www.hashicorp.com/resources/policies-vault/
    # https://www.vaultproject.io/api-docs/system/policies#create-update-acl-policy
    # https://www.vaultproject.io/api/system/policy.html#create-update-policy
    # https://www.vaultproject.io/docs/concepts/policies#policy-syntax
    # also, there is a lot of obsolete online resources (2015) that do not
    # mention the required 'policy' key, but use some 'rules' key (or other):
    # https://www.vaultproject.io/api/system/policy.html#create-update-policy
    # https://hvac.readthedocs.io/en/stable/usage/ ...
    #  ... system_backend/policy.html#manipulate-policies
    # https://github.com/hashicorp/vault/issues/582#issue-104019680

    # echo
    # echo 'policy_json:'
    # jq '.' <<< "${policy_json}"
    # sample output:
    # policy_json:
    # [
    #   {
    #     "capabilities": [
    #       "read"
    #     ],
    #     "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-admin-credentials"
    #   },
    #   {
    #     "capabilities": [
    #       "read"
    #     ],
    #     "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-reader-credentials"
    #   },
    #   {
    #     "capabilities": [
    #       "read"
    #     ],
    #     "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-root-credentials"
    #   },
    #   {
    #     "capabilities": [
    #       "read"
    #     ],
    #     "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-user-credentials"
    #   }
    # ]

    # if the yaml file doesn't conf any policies, json is empty;
    # ensure jinja works and a better error message is displayed in log
    if [ -z "${policy_json}" ]
    then
        policy_json='{ "policies": [] }'
    else
        # inject 'policies' root key to give
        # jinja a top level item to iterate over:
        # https://stackoverflow.com/q/54087843
        policy_json="$(jq '{ policies: . }' <<< "${policy_json}")"
    fi

    # echo
    # echo 'policy_json:'
    # jq '.' <<< "${policy_json}"
    # echo
    # sample output:
    # policy_json:
    # {
    #   "policies": [
    #     {
    #       "capabilities": [
    #         "read"
    #       ],
    #       "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-admin-credentials"
    #     },
    #     {
    #       "capabilities": [
    #         "read"
    #       ],
    #       "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-reader-credentials"
    #     },
    #     {
    #       "capabilities": [
    #         "read"
    #       ],
    #       "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-root-credentials"
    #     },
    #     {
    #       "capabilities": [
    #         "read"
    #       ],
    #       "path": "kv-v2/data/Projects/MailFlow/Database/feature/database-user-credentials"
    #     }
    #   ]
    # }

    # turn json into jcl using jinja template
    if output="$(jinja2 --format=json --strict "${path_to_j2h_tmpl}" \
                  <<< "${policy_json}" 2>&1)"
    then
        # echo 'OK'
        policy_hcl="${output}"
    else
        echo 'ERROR: failed to convert policies json into hcl:'
        echo "  ${output}"
        exit 1
    fi

    # echo
    # echo 'policy_hcl:'
    # echo "${policy_hcl}"
    # sample output:
    # policy_hcl:
    # path "kv-v2/data/Projects/MailFlow/Database/feature/database-admin-credentials"
    # {
    #   capabilities = [ "read" ]
    # }
    #
    # path "kv-v2/data/Projects/MailFlow/Database/feature/database-reader-credentials"
    # {
    #   capabilities = [ "read" ]
    # }
    #
    # path "kv-v2/data/Projects/MailFlow/Database/feature/database-root-credentials"
    # {
    #   capabilities = [ "read" ]
    # }
    #
    # path "kv-v2/data/Projects/MailFlow/Database/feature/database-user-credentials"
    # {
    #   capabilities = [ "read" ]
    # }

    # turn hcl into one line of json with newlines replaced by \n and
    # " replaced by \"; also inject 'policy' root key expected by vault;
    # NOTE: alternative approach:
    # replace new lines by \n: https://stackoverflow.com/a/43967678
    # policy_hcl_json="$(sed -e 's|$|\\n|' -e 's|"|\\"|g' \
    #                     <<< "${policy_hcl}"  | tr -d '\n')"
    # jq arg from shell variable: https://stackoverflow.com/a/40027637
    jq_expr='{ policy: $policy_value }'
    policy_json="$(jq -n --arg policy_value "${policy_hcl}" "${jq_expr}")"

    # echo
    # echo 'policy_json:'
    # jq '.' <<< "${policy_json}"
    # sample output:
    # policy_json:
    # {
    #   "policy": "path \"kv-v2/ ... (some unreadable long line) ... ]\n}"
    # }

    # TODO: vault converts policies path into lower case
    full_url="${vault_host}/${policies_url_path}/${policy_path}"

    echo -n "  upload policy conf to path at : ${policy_path}: "
    if output="$(curl "${curl_args[@]}"                         \
                      --data    "${policy_json}"                \
                      --header  "X-Vault-Token: ${root_token}"  \
                      --request POST                            \
                      "${full_url}" 2>&1)"
    then
        # TODO: only for dev, remove
        if [ -n "${output}" ]
        then
            echo
            echo 'vault response:'
            jq '.' <<< "${output}"
            echo
        fi

        if err_resp="$(check_response "${output}" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "  ${err_resp}"
            exit 1
        fi
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
done


echo
echo 'HashiCorp Vault policies upload complete'
echo
