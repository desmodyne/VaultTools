#!/usr/bin/env bash

# dd-vt-upload-policies
#
# create policies on the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/intro/getting-started/policies.html
# https://www.vaultproject.io/docs/concepts/policies.html
# https://www.vaultproject.io/guides/configuration/policies.html

# NOTE: see also dd-vt-init-vault


echo
echo 'Upload HashiCorp Vault policies'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('jq' 'vault' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# conf_file is defined by get_conf_file_arg
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
for attr in key_file_name path_to_sec_loc  \
            policies_folder secrets vault_address
do
    # https://unix.stackexchange.com/a/68349
    declare "${attr}"="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/41418
    if [ -z "${!attr}" ] || [ "${!attr}" = 'null' ]
    then
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# TODO: review jq exprs to make these scalable beyond one path

# json data structure with secrets for each service
serv_secrets="$(jq '.[] | select(.context=="service")' <<< "${secrets}")"

# json data structure with secrets for each user
user_secrets="$(jq '.[] | select(.context=="user")'    <<< "${secrets}")"


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# TODO: req'd for defunct curl call
# policy request data template
# read -r -d '' policy_req_data_tmpl <<'EOT'
# {
#     "policy": "path \\"%s\\""
# }
# EOT


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload policies

# TODO: only do this if any services or users are configured

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

# TODO: this fails, address is ignored
# if output="$(vault login "${root_token}" -address="${vault_address}" 2>&1)"

echo -n 'log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


if [ -z "${serv_secrets}" ]
then
    echo 'no services configured; skip uploading service policy files'
else
    serv_names="$(jq -r '.sec_confs[].path' <<< "${serv_secrets}" | xargs)"
fi

for serv_name in ${serv_names}
do
    echo "service ${serv_name}:"

    path_to_conf_file="${path_to_sec_loc}/${policies_folder}/${serv_name}.hcl"

    if [ ! -e "${path_to_conf_file}" ]
    then
        echo '  policy configuration file does not exist; not uploaded:'
        echo "  ${path_to_conf_file}"
        continue
    fi

    echo -n '  upload policy: '
    if output="$(vault policy write -address="${vault_address}" \
                       "${serv_name}" "${path_to_conf_file}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file uploaded: ${path_to_conf_file}"
done


if [ -z "${user_secrets}" ]
then
    echo 'no users configured; skip uploading user policy files'
else
    user_names="$(jq -r '.sec_confs[].path' <<< "${user_secrets}" | xargs)"
fi

for user_name in ${user_names}
do
    echo "user ${user_name}:"

    path_to_conf_file="${path_to_sec_loc}/${policies_folder}/${user_name}.hcl"

    if [ ! -e "${path_to_conf_file}" ]
    then
        echo '  policy configuration file does not exist; not uploaded:'
        echo "  ${path_to_conf_file}"
        continue
    fi

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    # TODO: official documentation is absolutely useless:
    # https://www.vaultproject.io/api/system/policy.html
    #
    # TODO: this fails with
    #   Failed to parse policy: At 1:77: key 'path "/Volumes/VAULT/ ...
    #    ... secrets/DesmoDyne/vault.desmodyne.com/policies/ssc.hcl"' ...
    #    ... expected start of object ('{') or assignment ('=')
    #
    # if output="$(curl --data   "${policy_req_data}"           \
    #                   --header "X-Vault-Token: ${root_token}" \
    #                   --request POST                          \
    #                   --show-error                            \
    #                   --silent                                \
    #               "${vault_address}/v1/sys/policy/${user_name}" 2>&1)"
    # then
    #     # if successful, curl returns 0 and output is empty
    #     if [ -z "${output}" ]
    #     then
    #         echo 'OK'
    #     else
    #         echo 'ERROR'
    #         # sample output:
    #         # {"errors":["1 error occurred:\n\n* permission denied"]}
    #         if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
    #         then
    #             echo "${errors}"
    #         else
    #             echo "${output}"
    #         fi
    #         exit 1
    #     fi
    # fi
    #
    # contents of policy_req_data:
    # {
    #     "policy": "path \"/Volumes/VAULT/secrets/DesmoDyne/ ...
    #                        ... vault.desmodyne.com/policies/ssc.hcl\""
    # }
    #
    # TODO: Vault doesn't really seem to have their minds up on how to do this:
    # from https://www.vaultproject.io/intro/ ...
    #       ... getting-started/policies.html#writing-the-policy:
    #   vault policy write my-policy acl.hcl
    # from https://www.vaultproject.io/api/ ...
    #       ... system/policy.html#create-update-policy:
    #   vault write sys/policy/my-policy policy=@my-policy.hcl

    echo -n '  upload policy: '
    if output="$(vault policy write -address="${vault_address}" \
                       "${user_name}" "${path_to_conf_file}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo "  file uploaded: ${path_to_conf_file}"
done


echo
echo 'HashiCorp Vault policy upload complete'
echo
