#!/usr/bin/env bash

# dd-vt-upload-auth-methods
#
# upload (i.e. set up) authentication methods to (on) a vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-06-10


# https://www.vaultproject.io/docs/auth/index.html
# https://www.vaultproject.io/api/auth/index.html
# https://learn.hashicorp.com/vault/getting-started/authentication#auth-methods

# NOTE: see also dd-vt-init-vault and dd-vt-upload-policies


echo
echo 'Upload HashiCorp Vault authentication methods'
echo


# -----------------------------------------------------------------------------
# define functions: http://stackoverflow.com/a/6212408

# TODO: doc function purpose, parameters, return values, etc.
# TODO: use function arguments instead of global variables

function enable_approle
{
    if [ $# -ne 3 ]
    then
        # get function name: https://stackoverflow.com/a/1835958
        echo "Usage: ${FUNCNAME[0]} <vault host> <token> <conf>"
        return 1
    fi

    # TODO: validate arguments

    # vault server protocol, host and port
    vault_host="${1}"

    # token used to auth; typically the root token
    token="${2}"

    # auth method conf
    conf="${3}"

    # https://www.vaultproject.io/api-docs/system/auth#enable-auth-method
    # NOTE: this also works, is shorter, but depends on the vault client:
    #   vault auth enable -address="${vault_host}" approle

    # echo 'auth method conf:'
    # jq '.' <<< "${conf}"
    # sample output:
    # auth method conf:
    # {
    #   "description": "AppRole auth method for machines to log in",
    #   "folder": "v1/auth/approle/role",
    #   "roles": [
    #     {
    #       "file": "Projects/MailFlow/Database/feature/builder.yaml",
    #       "path": "Projects/MailFlow/Database/feature/builder"
    #     }
    #   ],
    #   "root_conf": "v1/auth/approle/role",
    #   "root_enable": "v1/sys/auth/approle",
    #   "type": "approle"
    # }

    # TODO: set path to support multiple instances of one auth method ?
    # from https://www.vaultproject.io/docs/commands/auth/enable#usage:
    #   Place where the auth method will be accessible. This must be unique
    #   across all auth methods. This defaults to the "type" of the auth method.
    #   The auth method will be accessible at /auth/<path>.

    description="$(jq -r '.description' <<< "${conf}")"
    root_enable="$(jq -r '.root_enable' <<< "${conf}")"
    type="$(       jq -r '.type'        <<< "${conf}")"

    req_data="$(jo description="${description}" type="${type}")"
    full_url="${vault_host}/${root_enable}"

    jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

    echo -n '    enable auth method: '
    if output="$(curl "${curl_args[@]}"                     \
                      --data    "${req_data}"               \
                      --header  "X-Vault-Token: ${token}"   \
                      --request POST                        \
                      "${full_url}" 2>&1)"
    then
        err_resp="$(jq -r "${jq_err}" <<< "${output}")"

        if [ -z "${err_resp}" ]
        then
            echo 'OK'
        else
            # TODO: ignore for now, check enabled auth methods in future
            if [ "${err_resp}" = "path is already in use at approle/" ]
            then
                echo 'IGNORE ERROR'
                echo "      ${err_resp}"
            else
                echo 'ERROR'
                echo "          ${err_resp}"
                return 1
            fi
        fi
    else
        echo 'ERROR'
        echo "    ${output}"
        return 1
    fi
}


function set_up_approle
{
    if [ $# -ne 3 ]
    then
        echo "Usage: ${FUNCNAME[0]} <vault host> <token> <conf>"
        return 1
    fi

    # TODO: validate arguments

    # vault server protocol, host and port
    vault_host="${1}"

    # token used to auth; typically the root token
    token="${2}"

    # auth method conf
    conf="${3}"

    # NOTE: the vault CLI supports conf'ing roles, but requires translating
    # a possibly large number of arguments from json into cmd line params:
    # https://www.vaultproject.io/api/auth/ ...
    #  ... approle/index.html#create-update-approle
    # https://www.vaultproject.io/api-docs/auth/approle#parameters

    echo '    set up auth method:'

    folder="$(     jq -r '.folder'      <<< "${conf}")"
    root_conf="$(  jq -r '.root_conf'   <<< "${conf}")"
    roles="$(      jq -r '.roles'       <<< "${conf}")"

    # TODO: path_to_sec_loc is a global variable - get as arg like vault_host ?
    echo
    echo "      local auth method root folder : ${path_to_sec_loc}/${folder}"
    echo "      vault auth method root url    : ${vault_host}/${root_conf}"
    echo

    jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

    if [ -z "${roles}" ] || [ "${roles}" = 'null' ]
    then
        echo '      no roles configured - setup complete'
        echo
        return 0
    else
        mapfile -t role_paths < <(jq -r '.[].path' <<< "${roles}")
    fi

    echo '      create roles:'
    echo

    for role_path in "${role_paths[@]}"
    do
        jq_expr=".[] | select(.path == \"${role_path}\")"
        role_conf="$(jq "${jq_expr}" <<< "${roles}")"

        file="$(jq -r '.file' <<< "${role_conf}")"
        path_to_role_file="${path_to_sec_loc}/${folder}/${file}"

        if [ ! -e "${path_to_role_file}" ]
        then
            echo '        ERROR: role file does not exist:'
            echo "          ${file}"
            return 1
        fi

        echo -n "        load role conf from file at : ${file}: "
        if output="$(yq read "${path_to_role_file}" --tojson 2>&1)"
        then
            echo 'OK'
            role_json="${output}"
        else
            echo 'ERROR'
            echo "    ${output}"
            return 1
        fi

        # TODO: Vault does not support folder notation for roles :-(
        # attempting to create a role with / in its name fails with
        # { "errors": [ "1 error occurred:\n\t* unsupported path\n\n" ] }
        # for now, replace / by _ and live with the fact that all roles
        # end up in Vault as one long list of long role names instead
        # of short role names structured in a hierarchy of folders
        role_path="$(sed -e 's|/|_|g' <<< "${role_path}")"

        # TODO: Vault accepts mixed case for role name, but silently
        # converts upper case to lower case; pre-empt that explicitly:
        # https://wiki-dev.bash-hackers.org/syntax/pe#case_modification
        role_path="${role_path,,}"

        full_url="${vault_host}/${root_conf}/${role_path}"

        echo -n "        upload role conf to path at : ${role_path}: "
        if output="$(curl "${curl_args[@]}"                         \
                          --data "${role_json}"                     \
                          --header "X-Vault-Token: ${root_token}"   \
                          --request POST                            \
                          "${full_url}" 2>&1)"
        then
            # TODO: only for dev, remove
            if [ -n "${output}" ]
            then
                echo
                echo 'vault response:'
                jq '.' <<< "${output}"
                echo
            fi

            if [ -z "$(jq -r "${jq_err}" <<< "${output}")" ]
            then
                echo 'OK'
            else
                echo 'ERROR'
                echo "          ${output}"
                return 1
            fi
        else
            echo 'ERROR'
            echo "          ${output}"
            return 1
        fi
    done
}


# NOTE: no need to enable token auth method, enabled by default


function set_up_token
{
    if [ $# -ne 3 ]
    then
        echo "Usage: ${FUNCNAME[0]} <vault host> <token> <conf>"
        return 1
    fi

    # TODO: see also set_up_approle
    # TODO: remove 100% duplicate code here ./. set_up_approle

    # vault server protocol, host and port
    vault_host="${1}"

    # token used to auth; typically the root token
    token="${2}"

    # auth method conf
    conf="${3}"

    echo '    set up auth method:'

    folder="$(     jq -r '.folder'      <<< "${conf}")"
    root_conf="$(  jq -r '.root_conf'   <<< "${conf}")"
    roles="$(      jq -r '.roles'       <<< "${conf}")"

    echo
    echo "      local auth method root folder : ${path_to_sec_loc}/${folder}"
    echo "      vault auth method root url    : ${vault_host}/${root_conf}"
    echo

    jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

    if [ -z "${roles}" ] || [ "${roles}" = 'null' ]
    then
        echo '      no roles configured - setup complete'
        echo
        return 0
    else
        mapfile -t role_paths < <(jq -r '.[].path' <<< "${roles}")
    fi

    echo '      create roles:'
    echo

    for role_path in "${role_paths[@]}"
    do
        jq_expr=".[] | select(.path == \"${role_path}\")"
        role_conf="$(jq "${jq_expr}" <<< "${roles}")"

        file="$(jq -r '.file' <<< "${role_conf}")"
        path_to_role_file="${path_to_sec_loc}/${folder}/${file}"

        if [ ! -e "${path_to_role_file}" ]
        then
            echo '        ERROR: role file does not exist:'
            echo "          ${file}"
            return 1
        fi

        echo -n "        load role conf from file at : ${file}: "
        if output="$(yq read "${path_to_role_file}" --tojson 2>&1)"
        then
            echo 'OK'
            role_json="${output}"
        else
            echo 'ERROR'
            echo "    ${output}"
            return 1
        fi

        role_path="$(sed -e 's|/|_|g' <<< "${role_path}")"
        role_path="${role_path,,}"

        full_url="${vault_host}/${root_conf}/${role_path}"

        echo -n "        upload role conf to path at : ${role_path}: "
        if output="$(curl "${curl_args[@]}"                         \
                          --data "${role_json}"                     \
                          --header "X-Vault-Token: ${root_token}"   \
                          --request POST                            \
                          "${full_url}" 2>&1)"
        then
            # TODO: only for dev, remove
            if [ -n "${output}" ]
            then
                echo
                echo 'vault response:'
                jq '.' <<< "${output}"
                echo
            fi

            if [ -z "$(jq -r "${jq_err}" <<< "${output}")" ]
            then
                echo 'OK'
            else
                echo 'ERROR'
                echo "          ${output}"
                return 1
            fi
        else
            echo 'ERROR'
            echo "          ${output}"
            return 1
        fi
    done
}


function enable_userpass
{
    if [ $# -ne 3 ]
    then
        echo "Usage: ${FUNCNAME[0]} <vault host> <token> <conf>"
        return 1
    fi

    # TODO: see also enable_approle
    # TODO: remove duplicate, really similar code here ./. enable_approle

    # vault server protocol, host and port
    vault_host="${1}"

    # token used to auth; typically the root token
    token="${2}"

    # auth method conf
    conf="${3}"

    description="$(jq -r '.description' <<< "${conf}")"
    root_enable="$(jq -r '.root_enable' <<< "${conf}")"
    type="$(       jq -r '.type'        <<< "${conf}")"

    req_data="$(jo description="${description}" type="${type}")"
    full_url="${vault_host}/${root_enable}"

    jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

    echo -n '    enable auth method: '
    if output="$(curl "${curl_args[@]}"                     \
                      --data    "${req_data}"               \
                      --header  "X-Vault-Token: ${token}"   \
                      --request POST                        \
                      "${full_url}" 2>&1)"
    then
        err_resp="$(jq -r "${jq_err}" <<< "${output}")"

        if [ -z "${err_resp}" ]
        then
            echo 'OK'
        else
            if [ "${err_resp}" = "path is already in use at userpass/" ]
            then
                echo 'IGNORE ERROR'
                echo "      ${err_resp}"
            else
                echo 'ERROR'
                echo "          ${err_resp}"
                return 1
            fi
        fi
    else
        echo 'ERROR'
        echo "    ${output}"
        return 1
    fi
}


function set_up_userpass
{
    if [ $# -ne 3 ]
    then
        echo "Usage: ${FUNCNAME[0]} <vault host> <token> <method conf>"
        return 1
    fi

    # TODO: see also set_up_approle
    # TODO: remove duplicate, really similar code here ./. set_up_approle

    # vault server protocol, host and port
    vault_host="${1}"

    # token used to auth; typically the root token
    token="${2}"

    # auth method conf
    conf="${3}"

    echo '    set up auth method:'

    folder="$(     jq -r '.folder'      <<< "${conf}")"
    root_conf="$(  jq -r '.root_conf'   <<< "${conf}")"
    users="$(      jq -r '.users'       <<< "${conf}")"

    echo
    echo "      local auth method root folder : ${path_to_sec_loc}/${folder}"
    echo "      vault auth method root url    : ${vault_host}/${root_conf}"
    echo

    jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

    if [ -z "${users}" ] || [ "${users}" = 'null' ]
    then
        echo '      no users configured - setup complete'
        echo
        return 0
    else
        mapfile -t user_paths < <(jq -r '.[].path' <<< "${users}")
    fi

    echo '      create users:'
    echo

    for user_path in "${user_paths[@]}"
    do
        jq_expr=".[] | select(.path == \"${user_path}\")"
        user_conf="$(jq "${jq_expr}" <<< "${users}")"

        file="$(jq -r '.file' <<< "${user_conf}")"
        path_to_user_file="${path_to_sec_loc}/${folder}/${file}"

        if [ ! -e "${path_to_user_file}" ]
        then
            echo '        ERROR: user file does not exist:'
            echo "          ${file}"
            return 1
        fi

        echo -n "        load user conf from file at : ${file}: "
        if output="$(yq read "${path_to_user_file}" --tojson 2>&1)"
        then
            echo 'OK'
            user_json="${output}"
        else
            echo 'ERROR'
            echo "    ${output}"
            return 1
        fi

        # TODO: Vault does not support folder notation for users :-(
        # TODO: if this is done in the same way as for roles,
        # a user e.g. ssc ends up having a username users_ssc,
        # so just use the 'basename', i.e. only the username itself
        user_path="$(basename "${user_path}")"

        full_url="${vault_host}/${root_conf}/${user_path}"

        echo -n "        upload user conf to path at : ${user_path}: "
        if output="$(curl "${curl_args[@]}"                         \
                          --data "${user_json}"                     \
                          --header "X-Vault-Token: ${root_token}"   \
                          --request POST                            \
                          "${full_url}" 2>&1)"
        then
            # TODO: only for dev, remove
            if [ -n "${output}" ]
            then
                echo
                echo 'vault response:'
                jq '.' <<< "${output}"
                echo
            fi

            if [ -z "$(jq -r "${jq_err}" <<< "${output}")" ]
            then
                echo 'OK'
            else
                echo 'ERROR'
                echo "          ${output}"
                return 1
            fi
        else
            echo 'ERROR'
            echo "          ${output}"
            return 1
        fi
    done
}


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# NOTE: deviating from alphabetical order conv for consistency in
# dd-vt-upload-auth-methods, dd-vt-upload-policies and dd-vt-upload-secrets
# shellcheck disable=SC2034
attrs=(key_file_name path_to_sec_loc vault_host
       methods methods_folder methods_root)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'

# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  # shellcheck disable=SC2154
        echo "vault at ${vault_host} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_host} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload authentication methods

# TODO: this does not support enabling an auth method at a non-default path

# shellcheck disable=SC2154
if [ -z "${methods}" ] || [ "${methods}" = 'null' ]
then
    echo 'no auth methods configured; skip setup'
    echo
    echo 'HashiCorp Vault authentication method upload complete'
    echo
    exit
else
    mapfile -t method_names < <(jq -r 'keys[]' <<< "${methods}")
fi

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo
echo 'process auth method configurations:'

for method_name in "${method_names[@]}"
do
    echo
    echo "  ${method_name}:"

    method_conf="$(jq ".${method_name}" <<< "${methods}")"

    case "${method_name}" in
        approle)
            if ! enable_approle  "${vault_host}" \
                                 "${root_token}" \
                                 "${method_conf}"; then exit 1; fi
            if ! set_up_approle  "${vault_host}" \
                                 "${root_token}" \
                                 "${method_conf}"; then exit 1; fi
            ;;
        token)
            # NOTE: no need to enable token auth method, enabled by default
            if ! set_up_token    "${vault_host}" \
                                 "${root_token}" \
                                 "${method_conf}"; then exit 1; fi
            ;;
        userpass)
            if ! enable_userpass "${vault_host}" \
                                 "${root_token}" \
                                 "${method_conf}"; then exit 1; fi
            if ! set_up_userpass "${vault_host}" \
                                 "${root_token}" \
                                 "${method_conf}"; then exit 1; fi
            ;;
        *)
            echo "    ERROR: auth method ${method_name} is not supported"
            continue
            ;;
    esac
done


echo
echo 'HashiCorp Vault authentication method upload complete'
echo
