#!/usr/bin/env bash

# set-up-auth-approles
#
# set up AppRole authentication method
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-06-17


# https://www.vaultproject.io/api/auth/approle/index.html#role_name
# https://www.vaultproject.io/docs/auth/approle.html
# https://www.vaultproject.io/guides/identity/authentication.html#steps  <-- !!!


echo
echo 'Set up HashiCorp Vault AppRole authentication'
echo


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq -j r "${config_file}")"

vault_address="$(   jq -r '.vault_address'    <<< "${config}")"
path_to_sec_loc="$( jq -r '.path_to_sec_loc'  <<< "${config}")"
key_file_name="$(   jq -r '.key_file_name'    <<< "${config}")"

# compound configuration sections
services_json="$(   jq -r '.services'         <<< "${config}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# set up approle authentication


if [ "${services_json}" = 'null' ]
then
    echo 'no services configured; skip setting up approle authentication'
    echo
    echo 'HashiCorp Vault AppRole authentication setup complete'
    echo
    exit
else
    serv_names="$(jq -r '.[].name' <<< "${services_json}" | xargs)"
fi


root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# https://www.vaultproject.io/api/system/auth.html

# NOTE: see also set-up-auth-userpass

echo -n 'get enabled auth methods: '
if output="$(vault auth list -address="${vault_address}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

auth_lines="$(tail -n +3 <<< "${output}")"
auth_methods=''

OLD_IFS="${IFS}" && IFS=$'\n'

for auth_line in ${auth_lines}
do
    # TODO: align code, do this with array
    auth_meth="$("${sed}" -e 's|.*  \([a-z]\+\)  .*|\1|g' <<< "${auth_line}")"
    auth_methods+="${auth_meth} "
done

IFS="${OLD_IFS}"

auth_methods="${auth_methods%% }"

echo -n 'enable approle auth method: '

if [[ "${auth_methods}" == *approle* ]]
then
    echo 'already enabled'
else
    if output="$(vault auth enable -address="${vault_address}" approle 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi


for serv_name in ${serv_names}
do
    echo "service ${serv_name}: "

    echo -n "  add approle role: "

    # TODO: test if user exists and output 'overwriting' message
    if output="$(curl --data "{\"policies\": \"${serv_name}\"}"  \
                      --header "X-Vault-Token: ${root_token}"       \
                      --request POST                                \
                      --show-error                                  \
                      --silent                                      \
                  "${vault_address}/v1/auth/approle/role/${serv_name}" 2>&1)"
    then
        # if successful, curl returns 0 and output is empty
        if [ -z "${output}" ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            # sample output:
            # {"errors":["1 error occurred:\n\n* permission denied"]}
            if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
            then
                echo "${errors}"
            else
                echo "${output}"
            fi
            exit 1
        fi
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
done


echo
echo 'HashiCorp Vault AppRole authentication setup complete'
echo
