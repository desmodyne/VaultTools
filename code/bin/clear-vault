#!/usr/bin/env bash

# clear-vault
#
# clear vault, i.e remove all policies, secrets, users
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-23


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

# TODO: derive port 443 from protocol https ?
vault_address="$(   yq r - vault_address    <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"


if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# secrets root path
# TODO: is this the only possibly top-level folder ?
root_path='secret'


# -----------------------------------------------------------------------------
# clear vault

echo -n 'Get vault status: '

# NOTE: from vault status --help:
#   The exit code reflects the seal status:
#       - 0 - unsealed
#       - 1 - error
#       - 2 - sealed

output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
elif [ "${res}" = 1 ]
then
    echo 'ERROR'
    echo "${output}"
    exit "${res}"
else
    echo 'OK'
    echo "Vault at ${vault_address} is sealed; please unseal and try again"
    exit "${res}"
fi


root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'Log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo 'Clear vault: '

echo -n '  Get vault policies: '
# TODO: vault inconsistency: just policy names, no table json etc. as below
if output="$(vault policy list -address="${vault_address}" 2>&1)"
then
    echo 'OK'
    response="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

for policy in ${response}
do
    # output contains control characters:
    # 'default' policy string is 17 (!) characters long
    # https://unix.stackexchange.com/a/96485
    policy="$(tail -n 1 <<< "${policy}" \
                 | "${sed}" -r "s|\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]||g")"

    # these policies are built in
    if [ "${policy}" = 'default' ] || \
       [ "${policy}" = 'root'    ]
    then
        continue
    fi

    echo -n "  Delete vault policy ${policy}: "
    if output="$(vault policy delete -address="${vault_address}" "${policy}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done

echo -n '  Get vault secrets paths: '
# NOTE: as opposed to elsewhere, -format=json works here
if output="$(vault list -address="${vault_address}" \
                 -format=json "${root_path}" 2>&1)"
then
    echo 'OK'
    response="${output}"

    echo -n '  Extract secrets paths from response: '
    if output="$(jq -r '.[]' <<< "${response}" 2>&1)"
    then
        echo 'OK'
        secrets="${output}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

for secret in ${secrets}
do
    # TODO: response always is this, no idea if anything was deleted:
    # Success! Data deleted (if it existed) at: secret/user
    # https://github.com/hashicorp/vault/issues/885
    echo -n "  Delete secrets path ${root_path}/${secret}: "
    if output="$(vault delete -address="${vault_address}" \
                     "${root_path}/${secret}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done

# https://www.vaultproject.io/api/auth/userpass/index.html#list-users

# TODO list users for userpass auth in cli ?
# supposed to be the same as listing secrets:
# https://github.com/hashicorp/vault/issues/635

echo -n '  Get users: '
if output="$(curl --header "X-Vault-Token: ${root_token}" \
                  --request LIST                          \
                  --show-error                            \
                  --silent                                \
                  "${vault_address}/v1/auth/userpass/users" 2>&1)"
then
    # if successful, curl returns 0 and
    # output is json with keys and token
    echo 'OK'
    response="${output}"

    # sample response:
    # TODO: again, not a response but just some data mess
    # {
    #   "data": {
    #     "keys": [
    #       "mitchellh",
    #       "armon"
    #     ]
    #   }
    # }

    if output="$(jq -r '.data.keys[]' <<< "${response}" 2>&1)"
    then
        users="${output}"
    else
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
fi

for user in ${users}
do
    echo -n "  Delete user ${user}: "
    if output="$(curl --header "X-Vault-Token: ${root_token}" \
                      --request DELETE                        \
                      --show-error                            \
                      --silent                                \
                  "${vault_address}/v1/auth/userpass/users/${user}" 2>&1)"
    then
        # if successful, curl returns 0 and output is empty
        if [ -z "${output}" ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            # sample output:
            # {"errors":["1 error occurred:\n\n* permission denied"]}
            if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
            then
                echo "${errors}"
            else
                echo "${output}"
            fi
            exit 1
        fi
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done
