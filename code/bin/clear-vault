#!/usr/bin/env bash

# clear-vault
#
# clear vault, i.e remove all policies, secrets, users
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-23


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        sed='gsed'
        xargs='gxargs'
        ;;
    linux-*)
        sed='sed'
        xargs='xargs'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_host="$(      yq r - vault_host       <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"


# -----------------------------------------------------------------------------
# validate config settings

echo -n 'Validate configuration settings: '

if [ -e "${path_to_sec_loc}" ]
then
    if [ -d "${path_to_sec_loc}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path exists, but is not a directory:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
else
    # https://github.com/koalaman/shellcheck/wiki/SC2207
    mapfile -t array < \
        <("${xargs}" -n 1 -d '/' <<< "${path_to_sec_loc}" | "${xargs}")

    if [ -d "/${array[0]}/${array[1]}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path to secure location is not mounted:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# complete vault url
vault_address="https://${vault_host}"

# secrets root path
# TODO: is this the only possibly top-level folder ?
root_path='secret'


# -----------------------------------------------------------------------------
# clear vault

echo -n 'Get vault status: '
output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
elif [ "${res}" = 1 ]
then
    echo 'ERROR'
    echo "${output}"
    exit "${res}"
else
    echo "Vault at ${vault_address} is sealed; please unseal and try again"
    exit "${res}"
fi

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'Log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo 'Clear vault: '

echo -n '  Get vault policies: '
# TODO: vault inconsistency: just policy names, no table json etc. as below
if output="$(vault policy list -address="${vault_address}" 2>&1)"
then
    echo 'OK'
    response="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

for policy in ${response}
do
    # output contains control characters:
    # 'default' policy string is 17 (!) characters long
    # https://unix.stackexchange.com/a/96485
    policy="$(tail -n 1 <<< "${policy}" \
                 | "${sed}" -r "s|\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]||g")"

    # these policies are built in
    if [ "${policy}" = 'default' ] || \
       [ "${policy}" = 'root'    ]
    then
        continue
    fi

    echo -n "  Delete vault policy ${policy}: "
    if output="$(vault policy delete -address="${vault_address}" "${policy}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done

echo -n '  Get vault secrets paths: '
# NOTE: as opposed to elsewhere, -format=json works here
if output="$(vault list -address="${vault_address}" \
                 -format=json "${root_path}" 2>&1)"
then
    echo 'OK'
    response="${output}"

    echo -n '  Extract secrets paths from response: '
    if output="$(jq -r '.[]' <<< "${response}" 2>&1)"
    then
        echo 'OK'
        secrets="${output}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

for secret in ${secrets}
do
    # TODO: response always is this, no idea if anything was deleted:
    # Success! Data deleted (if it existed) at: secret/user
    # https://github.com/hashicorp/vault/issues/885
    echo -n "  Delete secrets path ${root_path}/${secret}: "
    if output="$(vault delete -address="${vault_address}" \
                     "${root_path}/${secret}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done

# https://www.vaultproject.io/api/auth/userpass/index.html#list-users

# TODO list users for userpass auth in cli ?
# supposed to be the same as listing secrets:
# https://github.com/hashicorp/vault/issues/635

echo -n '  Get users: '
if output="$(curl --header "X-Vault-Token: ${root_token}" \
                  --request LIST                          \
                  --show-error                            \
                  --silent                                \
                  "${vault_address}/v1/auth/userpass/users" 2>&1)"
then
    # if successful, curl returns 0 and
    # output is json with keys and token
    echo 'OK'
    response="${output}"

    # sample response:
    # TODO: again, not a response but just some data mess
    # {
    #   "data": {
    #     "keys": [
    #       "mitchellh",
    #       "armon"
    #     ]
    #   }
    # }

    if output="$(jq -r '.data.keys[]' <<< "${response}" 2>&1)"
    then
        users="${output}"
    else
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
fi

for user in ${users}
do
    echo -n "  Delete user ${user}: "
    if output="$(curl --header "X-Vault-Token: ${root_token}" \
                      --request DELETE                        \
                      --show-error                            \
                      --silent                                \
                  "${vault_address}/v1/auth/userpass/users/${user}" 2>&1)"
    then
        # if successful, curl returns 0 and output is empty
        if [ -z "${output}" ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            # sample output:
            # {"errors":["1 error occurred:\n\n* permission denied"]}
            if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
            then
                echo "${errors}"
            else
                echo "${output}"
            fi
            exit 1
        fi
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
done
