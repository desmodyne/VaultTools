#!/usr/bin/env bash

# dd-vt-configure-vault
#
# configure the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# https://www.vaultproject.io/docs/audit/file.html


echo
echo 'Configure HashiCorp Vault instance'
echo


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source dd-vt-vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq -j r "${config_file}")"

vault_address="$(   jq -r '.vault_address'    <<< "${config}")"
path_to_log_file="$(jq -r '.path_to_log_file' <<< "${config}")"
path_to_sec_loc="$( jq -r '.path_to_sec_loc'  <<< "${config}")"
key_file_name="$(   jq -r '.key_file_name'    <<< "${config}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  #
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# configure vault


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "failed to pushd to project root ${path_to_project_root}"
    exit
fi


root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# TODO: just like in set-up-users,
# any combination of this fails with
# flag provided but not defined: -format
# vault audit list -detailed -format json

echo -n 'get audit devices: '
if output="$(vault audit list -address="${vault_address}" -detailed 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'set up vault log file: '

# sample output:
# Path     Type    Description    Replication    Options
# ----     ----    -----------    -----------    -------
# file/    file    n/a            replicated     file_path=/var/log/vault/audit.log

audit_lines="$(tail -n +3 <<< "${output}")"

OLD_IFS="${IFS}" && IFS=$'\n'

for audit_line in ${audit_lines}
do
    # output contains control characters
    # https://unix.stackexchange.com/a/96485
    clean_line="$(tail -n 1 <<< "${audit_line}" \
                 | "${sed}" -r "s|\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]||g")"

    IFS="${OLD_IFS}"
    # https://stackoverflow.com/a/13402368
    # NOTE: word splitting is intended here
    # shellcheck disable=SC2206
    attributes=(${clean_line})
    OLD_IFS="${IFS}" && IFS=$'\n'

    if [ "${attributes[1]}" = 'file' ] && \
       [ "${attributes[4]}" = "file_path=${path_to_log_file}" ]
    then
        # TODO: support re-setting to new log file path ?
        echo 'already set up'
        echo
        echo 'HashiCorp Vault instance configuration complete'
        echo
        exit 0
    fi
done

IFS="${OLD_IFS}"

if output="$(vault audit enable -address="${vault_address}" \
                         file file_path="${path_to_log_file}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


if ! popd > /dev/null
then
    echo "failed to popd from project root ${path_to_project_root}"
    exit
fi


echo
echo 'HashiCorp Vault instance configuration complete'
echo
