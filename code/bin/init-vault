#!/usr/bin/env bash

# init-vault
#
# initialize a vault and store key and token data in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-20


# https://www.vaultproject.io/api/system/init.html


echo
echo 'Initialize HashiCorp Vault instance'
echo


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_address="$(   yq r - vault_address    <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"
secret_shares="$(   yq r - secret_shares    <<< "${config}")"
secret_threshold="$(yq r - secret_threshold <<< "${config}")"


# -----------------------------------------------------------------------------
if ! validate_config_settings;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# TODO: use template file instead of code ?
# template for http call json data
read -r -d '' json_data_tmpl <<'EOT'
{
    "secret_shares": %s,
    "secret_threshold": %s
}
EOT

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  echo "vault at ${vault_address} is already initialized - and unsealed"
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is already initialized - and sealed"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 3 ]
then
    echo
    echo 'HashiCorp Vault instance initialization complete'
    echo
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# init vault

if [ ! -d "${path_to_sec_loc}" ]
then
    echo -n 'create folder at secure location: '
    if output="$(mkdir -p "${path_to_sec_loc}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi


# render template
# shellcheck disable=SC2059
json_data="$(printf "${json_data_tmpl}" "${secret_shares}" \
                                        "${secret_threshold}")"

echo -n 'initialize vault: '
if output="$(curl --data "${json_data}" \
                  --request PUT         \
                  --show-error          \
                  --silent              \
                  "${vault_address}/v1/sys/init" 2>&1)"
then
    # if successful, curl returns 0 and
    # output is json with keys and token
    echo 'OK'
    response="${output}"

    if output="$(jq '.' <<< "${response}" 2>&1)"
    then
        # TODO: this should have been caught much earlier
        # sample output:
        # {"errors":["Vault is already initialized"]}
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}" > "${path_to_key_file}"
        fi
    else
        echo 'ERROR'
        # sample output:
        # {"errors":["1 error occurred:\n\n* permission denied"]}
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


echo
echo 'HashiCorp Vault instance initialization complete'
echo
