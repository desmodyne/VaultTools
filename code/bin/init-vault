#!/usr/bin/env bash

# init-vault
#
# initialize a vault and store key and token data in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-20


# https://www.vaultproject.io/api/system/init.html

# TODO: for all scripts that log into vault: revoke root token afterwards
# TODO: refactor functions / sections into library to reduce code duplication
# TODO: validate configuration settings in set-up-* scripts
# TODO: set up unit-testing:
# https://medium.com/@pimterry/testing-your-shell-scripts-with-bats-abfca9bdc5b9
# TODO: refactor various template approaches to using jq:
# https://github.com/stedolan/jq/wiki/Cookbook#using-jq-variables-as-template-variables
# TODO: move enabling userpass auth method from upload-users to configure-vault
# TODO: streamline adding new users:
#  + call file generation scripts from build-vault
#  + overwrite existing files only if some cmd line flag is passed
#  + generate passwords instead of using placeholder (unless cmd line param)
#  + get list of users from Ansible playbook configuration
#  + same for PKI: overwrite existing files only if cmd line flag is passed
#  + refine git check to support generating all files for one user


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

case "${OSTYPE}" in
    darwin*)
        sed='gsed'
        xargs='gxargs'
        ;;
    linux-*)
        sed='sed'
        xargs='xargs'
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit -1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

vault_host="$(      yq r - vault_host       <<< "${config}")"
path_to_sec_loc="$( yq r - path_to_sec_loc  <<< "${config}")"
key_file_name="$(   yq r - key_file_name    <<< "${config}")"
secret_shares="$(   yq r - secret_shares    <<< "${config}")"
secret_threshold="$(yq r - secret_threshold <<< "${config}")"


# -----------------------------------------------------------------------------
# validate config settings

echo -n 'Validate configuration settings: '

# TODO: verify path_to_sec_loc is an absolute path ?
# TODO: resolve symbolic links into real path ?

if [ -e "${path_to_sec_loc}" ]
then
    if [ -d "${path_to_sec_loc}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path exists, but is not a directory:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
else
    # split paths into its components
    # https://askubuntu.com/a/600252
    # TODO: this fails with whitespace in path
    comps="$("${xargs}" -n 1 -d '/' <<< "${path_to_sec_loc}" | "${xargs}")"

    # turn path components into array
    # https://stackoverflow.com/a/13402368
    # NOTE: word splitting is intended here
    # shellcheck disable=SC2206
    array=(${comps})

    # if at least the first two path components exist,
    # they are considered a solid base for the rest
    # TODO: this is specific to local secure location
    # TODO: this assumes at least two comps in path
    if [ -d "/${array[0]}/${array[1]}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path to secure location is not mounted:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# TODO: use template file instead of code ?
# template for http call json data
read -r -d '' json_data_tmpl <<'EOT'
{
    "secret_shares": %s,
    "secret_threshold": %s
}
EOT

# full path to file with key and token info
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# complete vault url
vault_address="https://${vault_host}"


# -----------------------------------------------------------------------------
# init vault

if [ ! -d "${path_to_sec_loc}" ]
then
    echo -n 'Create folder at secure location: '
    if output="$(mkdir -p "${path_to_sec_loc}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

echo -n 'Get vault status: '

# NOTE: from vault status --help:
#   The exit code reflects the seal status:
#       - 0 - unsealed
#       - 1 - error
#       - 2 - sealed

# sample output for uninitialized vault:
#   alexa:~ ssc$ vault status
#   Error checking seal status: Error making API request.
#
#   URL: GET https://vault.desmodyne.com/v1/sys/seal-status
#   Code: 400. Errors:
#
#   * server is not yet initialized

output="$(vault status -address="${vault_address}" 2>&1)"
res=$?
if   [ "${res}" = 0 ]
then
    echo 'OK'
    echo "Vault at ${vault_address} is already initialized - and unsealed"
    exit "${res}"
elif [ "${res}" = 1 ]
then
    # output contains control characters
    # https://unix.stackexchange.com/a/96485
    last_line="$(tail -n 1 <<< "${output}" \
                 | "${sed}" -r "s|\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]||g")"

    if [ "${last_line}" == '* server is not yet initialized' ]
    then
        echo 'OK'
    else
        echo 'Unexpected response from server:'
        echo "${output}"
        exit "${res}"
    fi
else
    echo 'OK'
    echo "Vault at ${vault_address} is already initialized - and sealed"
    exit "${res}"
fi


# it is a critical aspect of the overall PKI concept that the secure location
# SSH keys and generation log files are saved to is under version control;
# verify and abort script with a warning to the user if this is not the case
# NOTE: secure location is not necessarily location at repo root; checking for
# "${path_to_sec_loc}/.git does not help: https://stackoverflow.com/a/2180367

echo -n 'Verify secure location is under version control: '

if output="$(git -C "${path_to_sec_loc}" rev-parse --git-dir)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# if the repo is not clean to prevent overwriting changes
echo -n 'Verify secure location repository status: '

# https://unix.stackexchange.com/a/155077
if output="$(git -C "${path_to_sec_loc}" status --porcelain)"
then

    if [ -z "${output}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo 'Repository has uncommitted changes:'
        echo "${output}"
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


# render template
# shellcheck disable=SC2059
json_data="$(printf "${json_data_tmpl}" "${secret_shares}" \
                                        "${secret_threshold}")"

echo -n 'Init vault: '
if output="$(curl --data "${json_data}" \
                  --request PUT         \
                  --show-error          \
                  --silent              \
                  "${vault_address}/v1/sys/init" 2>&1)"
then
    # if successful, curl returns 0 and
    # output is json with keys and token
    echo 'OK'
    response="${output}"

    if output="$(jq '.' <<< "${response}" 2>&1)"
    then
        # TODO: this should have been caught much earlier
        # sample output:
        # {"errors":["Vault is already initialized"]}
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}" > "${path_to_key_file}"
            echo 'Vault has been initialized'
            exit 0
        fi
    else
        echo 'ERROR'
        # sample output:
        # {"errors":["1 error occurred:\n\n* permission denied"]}
        if errors="$(jq -r '.errors[]' <<< "${response}" 2>&1)"
        then
            echo "${errors}"
        else
            echo "${output}"
        fi
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi
