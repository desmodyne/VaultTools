#!/usr/bin/env bash

# create-policies-files
#
# generate configuration files for vault policies in secure location
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-21


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# see also build-vault

source vault.lib

if ! determine_platform;            then exit 1; fi
if ! proc_cmd_line_args "$@";       then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if key_file is available
# TODO: review output, message only if error or -v / --verbose

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

path_to_sec_loc="$(yq r - path_to_sec_loc <<< "${config}")"
policies_folder="$(yq r - policies_folder <<< "${config}")"

# TODO: yq fails to support accessing substructures, so use jq
services_json="$(  yq -j r - services     <<< "${config}")"
users_json="$(     yq -j r - users        <<< "${config}")"


# -----------------------------------------------------------------------------
# validate config settings

echo -n 'Validate configuration settings: '

if [ -e "${path_to_sec_loc}" ]
then
    if [ -d "${path_to_sec_loc}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path exists, but is not a directory:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
else
    # https://github.com/koalaman/shellcheck/wiki/SC2207
    mapfile -t array < \
        <("${xargs}" -n 1 -d '/' <<< "${path_to_sec_loc}" | "${xargs}")

    if [ -d "/${array[0]}/${array[1]}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo '  Path to secure location is not mounted:'
        echo "  ${path_to_sec_loc}"
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# path from this script to project root
rel_path_to_project_root='../..'

# absolute path to project root
path_to_project_root="$(realpath \
                        "${path_to_this_script}/${rel_path_to_project_root}")"

# path to folder with templates, relative to project root
path_to_tmpl_folder='data/tmpl'

# name of service policy template file
serv_tmpl_file_name='service_policy.hcl.j2'

# name of service template data template file
serv_tmpl_data_tmpl_name='service_policy_tmpl.json.j2'

# name of user policy template file
user_tmpl_file_name='user_policy.hcl.j2'

# name of user template data template file
user_tmpl_data_tmpl_name='user_policy_tmpl.json.j2'

# TODO: req'd for defunct curl call
# policy request data template
# read -r -d '' policy_req_data_tmpl <<'EOT'
# {
#     "policy": "path \\"%s\\""
# }
# EOT

# full path to folder with policies configuration files
path_to_policies_folder="${path_to_sec_loc}/${policies_folder}"


# -----------------------------------------------------------------------------
# create policies configuration file


if ! pushd "${path_to_project_root}" > /dev/null
then
    echo "Failed to pushd to project root ${path_to_project_root}"
    exit
fi


# see also init-vault for some more information

echo -n 'Verify secure location is under version control: '
if output="$(git -C "${path_to_sec_loc}" rev-parse --git-dir)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# if the repo is not clean to prevent overwriting changes
echo -n 'Verify secure location repository status: '
if output="$(git -C "${path_to_sec_loc}" status --porcelain)"
then

    if [ -z "${output}" ]
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo 'Repository has uncommitted changes:'
        echo "${output}"
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

if [ ! -d "${path_to_policies_folder}" ]
then
    echo -n 'Create policies configuration folder: '
    if output="$(mkdir -p "${path_to_policies_folder}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi

# TODO: continue or exit ?

if [ "${services_json}" != 'null' ]
then
    service_names="$(jq -r '.[].name' <<< "${services_json}" | xargs)"
fi

for service_name in ${service_names}
do
    path_to_conf_file="${path_to_policies_folder}/${service_name}.hcl"
    echo "${path_to_conf_file}"

    echo -n "Render template data template: "
    # j2 --format env requires export
    export service_name="${service_name}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${serv_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
    export service_name=

    echo -n "Create policies configuration file: "

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${serv_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_conf_file}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
    echo
done


if [ "${users_json}" != 'null' ]
then
    usernames="$(jq -r '.[].name' <<< "${users_json}" | xargs)"
fi

for username in ${usernames}
do
    path_to_conf_file="${path_to_policies_folder}/${username}.hcl"
    echo "${path_to_conf_file}"

    echo -n "Render template data template: "
    # j2 --format env requires export
    export username="${username}"
    if output="$(j2 --format env \
                     "${path_to_tmpl_folder}/${user_tmpl_data_tmpl_name}" 2>&1)"
    then
        echo 'OK'
        policy_tmpl_data="${output}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
    export username=

    echo -n "Create policies configuration file: "

    # TODO: req'd for defunct curl call
    # render request data template
    # shellcheck disable=SC2059
    # policy_req_data="$( printf "${policy_req_data_tmpl}"  "${path_to_conf_file}")"

    if output="$(j2 --format json \
                    "${path_to_tmpl_folder}/${user_tmpl_file_name}" \
                     <<< "${policy_tmpl_data}" 2>&1)"
    then
        echo 'OK'
        echo "${output}" > "${path_to_conf_file}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
    echo
done


if ! popd > /dev/null
then
    echo "Failed to popd from project root ${path_to_project_root}"
    exit
fi
