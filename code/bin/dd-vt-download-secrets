#!/usr/bin/env bash

# dd-vt-download-secrets
#
# download all secrets from a vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2020-06-16


# NOTE: see also dd-vt-init-vault


echo
echo 'Download HashiCorp Vault secrets'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# define functions: http://stackoverflow.com/a/6212408
function process_secrets_path
{
    url="${1}"

    # echo 'FUNCTION START'
    echo "  ${url}:"

    # https://www.vaultproject.io/api/secret/kv/kv-v2#list-secrets
    # TODO: review error detection; also look into warnings (see sample output)
    echo -n '  list secrets: '
    if output="$(curl "${curl_args[@]}"                         \
                      --header  "X-Vault-Token: ${root_token}"  \
                      --request LIST                            \
                      "${url}" 2>&1)"
    then
        if err_resp="$(check_response "${output}" 2>&1)"
        then
            echo 'OK'
            list_secrets_resp="${output}"
        else
            echo 'ERROR'
            echo "  ${err_resp}"
            exit 1
        fi
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    echo

    # echo '  list_secrets_resp:'
    # jq '.' <<< "${list_secrets_resp}"
    # jq '.' <<< "${list_secrets_resp}" | sed 's|^|  |'
    # sample output:
    # list_secrets_resp:
    # {
    #   "request_id": "771ca543-1173-adfd-bcdb-a24829d6c86e",
    #   "lease_id": "",
    #   "renewable": false,
    #   "lease_duration": 0,
    #   "data": {
    #     "keys": [
    #       "ansible/",
    #       "backend/",
    #       "database/",
    #       "frontend/",
    #       "vault/"
    #     ]
    #   },
    #   "wrap_info": null,
    #   "warnings": null,
    #   "auth": null
    # }

    jq_expr='if .data.keys then .data.keys[] else empty end'

    # shellcheck disable=SC2034
    mapfile -t secret_paths < <(jq -r "${jq_expr}" <<< "${list_secrets_resp}")

    for secret_path in "${secret_paths[@]}"
    do
        # if secret path ends with /, it is a folder; descend
        if [[ "${secret_path}" == */ ]]
        then
            # Vault is really sensitive about url paths; for e.g.
            #   https://vault.mailflow.dev/v1/kv-v2//ansible/
            # the response is empty, not even an error; need to
            # remove last character from secret path if present;
            # this has an effect only on the second hierarchy level
            secret_path="${secret_path::-1}"

            # NOTE: MUST USE ${1} FOR RECURSIVE FUNCTION CALLS TO WORK
            url="${1}/${secret_path}"

            if ! process_secrets_path "${url}"
            then
                exit 1
            fi

        # otherwise, it is a path; download secrets
        else
            # NOTE: MUST USE ${1} FOR REPEATED FUNCTION CALLS TO WORK
            url="${1}/${secret_path}"

            echo "  ${url}:"

            echo -n '  download secrets: '
            if output="$(curl "${curl_args[@]}"                         \
                              --header  "X-Vault-Token: ${root_token}"  \
                              --request GET                             \
                              "${url}" 2>&1)"
            then
                if err_resp="$(check_response "${output}" 2>&1)"
                then
                    echo 'OK'
                    get_secret_resp="${output}"
                else
                    echo 'ERROR'
                    echo "  ${err_resp}"
                    return 1
                fi
            else
                echo 'ERROR'
                echo "        ${output}"
                return 1
            fi

            # echo '  get_secret_resp:'
            # jq '.' <<< "${get_secret_resp}"
            # jq '.' <<< "${get_secret_resp}" | sed 's|^|  |'
            # echo

            secrets="$(jq '.data' <<< "${get_secret_resp}")"

            # shellcheck disable=SC2034
            mapfile -t keys < <(jq -r 'keys[]' <<< "${secrets}")

            # url path to secrets, relative to root_url
            # https://stackoverflow.com/a/16623897
            url_secrets_paths=${url#"${root_url}"}
            # strip leading /
            url_secrets_paths=${url_secrets_paths:1}
            # assemble path to yaml file with secrets
            secrets_file="${path_to_secrets_url_path}/${url_secrets_paths}.yaml"

            echo -n '  save secrets to yaml file: '
            for key in "${keys[@]}"
            do
                value="$(jq -r ".[\"${key}\"]" <<< "${secrets}")"
                # NOTE: need -- to prevent failure if value starts with --
                if ! output="$(yq write --inplace -- "${secrets_file}"  \
                                                     "${key}"           \
                                                     "${value}" 2>&1)"
                then
                    echo 'ERROR'
                    echo "${output}"
                    return 1
                fi
            done
            echo 'OK'
            echo
        fi
    done
}


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# shellcheck disable=SC2034
attrs=(commit_msg endpoints key_file_name
       path_to_sec_loc secrets_dir_path vault_host)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'

# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# full path to root of folders with secrets config files
# shellcheck disable=SC2154
path_to_secrets_url_path="${path_to_sec_loc}/${secrets_dir_path}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  # shellcheck disable=SC2154
        echo "vault at ${vault_host} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_host} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# download secrets

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

mapfile -t endpoints < <(jq -r '.[]' <<< "${endpoints}")

# TODO: sort endpoints / paths for dev ?
# TODO: handle case of no endpoints / paths
echo
echo 'process secrets endpoints:'
echo

for endpoint in "${endpoints[@]}"
do
    root_url="${vault_host}/${endpoint}"

    if ! process_secrets_path "${root_url}"
    then
        exit 1
    fi
done

# https://stackoverflow.com/a/50117376
# NOTE: this check must be done before adding files to repo
# NOTE: path_to_sec_loc is not the git repo root; doesn't matter
if git -C "${path_to_sec_loc}" diff --exit-code --quiet "${path_to_sec_loc}"
then
    echo 'no changes to commit'
else
    echo -n "add changes to repository: "
    if output="$(git -C "${path_to_sec_loc}" add --all 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo -n "commit changes to repository: "
    if output="$(git -C "${path_to_sec_loc}" commit -m "${commit_msg}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
fi


echo
echo 'HashiCorp Vault secrets download complete'
echo
