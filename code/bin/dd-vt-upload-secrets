#!/usr/bin/env bash

# dd-vt-upload-secrets
#
# upload secrets to a vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-22


# https://www.vaultproject.io/docs/commands/write.html
# https://www.vaultproject.io/intro/getting-started/first-secret.html

# NOTE: see also dd-vt-init-vault and dd-vt-upload-policies


echo
echo 'Upload HashiCorp Vault secrets'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# NOTE: deviating from alphabetical order conv for consistency in
# dd-vt-upload-methods, dd-vt-upload-policies and dd-vt-upload-secrets
# shellcheck disable=SC2034
attrs=(key_file_name path_to_sec_loc vault_host
       secrets secrets_dir_path secrets_url_path)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'

# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  # shellcheck disable=SC2154
        echo "vault at ${vault_host} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_host} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload secrets

# shellcheck disable=SC2154
if [ -z "${secrets}" ] || [ "${secrets}" = 'null' ]
then
    echo 'no secrets configured'
    echo
    echo 'HashiCorp Vault secrets upload complete'
    echo
    exit
else
    mapfile -t secrets_paths < <(jq -r '.[].path' <<< "${secrets}")
fi

# TODO: refactor this out to remove code duplication
root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo
echo 'process secrets:'
echo
echo "  local secrets dir path : ${path_to_sec_loc}/${secrets_dir_path}"
echo "  vault secrets url path : ${vault_host}/${secrets_url_path}"

# NOTE: there are multiple secrets in one file, so secrets_path, not secret_path
# and, in order to match conv in all dd-vt-upload_* files, also secrets_file
# TODO: handle case of no secrets paths
for secrets_path in "${secrets_paths[@]}"
do
    echo

    jq_expr=".[] | select(.path == \"${secrets_path}\")"
    secrets_conf="$(jq "${jq_expr}" <<< "${secrets}")"

    secrets_file="$(jq -r '.file' <<< "${secrets_conf}")"
    path_to_secrets_file="${path_to_sec_loc}/${secrets_dir_path}/${secrets_file}"

    if [ ! -e "${path_to_secrets_file}" ]
    then
        echo '  ERROR: secrets conf file does not exist:'
        echo "    ${path_to_secrets_file}"
        exit 1
    fi

    echo -n "  load secrets conf from file at : ${secrets_file}: "
    if output="$(yq read "${path_to_secrets_file}" --tojson 2>&1)"
    then
        echo 'OK'
        secrets_json="${output}"
    else
        echo 'ERROR'
        echo "      ${output}"
        exit 1
    fi

    # TODO: for some reason, Vault expects KV2 secrets to be underneath data;
    # this was not the case for cubbyhole, not sure about other engines;
    # jq inputs:   https://stedolan.github.io/jq/manual/#IO
    # example use: https://stackoverflow.com/a/29404613
    secrets_json="$(jq -n '.data = inputs' <<< "${secrets_json}")"

    full_url="${vault_host}/${secrets_url_path}/${secrets_path}"

    echo -n "  upload secrets conf to path at : ${secrets_path}: "
    if output="$(curl "${curl_args[@]}"                         \
                      --data    "${secrets_json}"               \
                      --header  "X-Vault-Token: ${root_token}"  \
                      --request POST                            \
                      "${full_url}" 2>&1)"
    then
        if err_resp="$(check_response "${output}" 2>&1)"
        then
            echo 'OK'
        else
            if [ "${err_resp}" = "path is already in use at userpass/" ]
            then
                echo 'IGNORE ERROR'
                echo "  ${err_resp}"
            else
                echo 'ERROR'
                echo "  ${err_resp}"
                exit 1
            fi
        fi
    else
        echo 'ERROR'
        echo "        ${output}"
        exit 1
    fi
done


echo
echo 'HashiCorp Vault secrets upload complete'
echo
