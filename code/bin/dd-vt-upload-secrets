#!/usr/bin/env bash

# dd-vt-upload-secrets
#
# create secrets on the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-22


# https://www.vaultproject.io/docs/commands/write.html
# https://www.vaultproject.io/intro/getting-started/first-secret.html

# NOTE: see also dd-vt-init-vault


echo
echo 'Upload HashiCorp Vault secrets'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'vault' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# shellcheck disable=SC2034
attrs=(key_file_name path_to_sec_loc secrets secrets_folder vault_address)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'

# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload secrets

if [ "${secrets}" = 'null' ]
then
    echo 'no secrets configured; skip setup'
    echo
    echo 'HashiCorp Vault secrets upload complete'
    echo
    exit
else
    secret_paths="$(jq -r '.[].path' <<< "${secrets}")"
fi

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# TODO: get this from elsewhere
jq_err='if .errors and (.errors | length) > 0 then .errors[] else empty end'

# NOTE: the vault CLI doesn't seem to support listing secrets
# https://www.vaultproject.io/api/secret/cubbyhole/index.html#list-secrets
# TODO: support other endpoints than cubbyhole
full_url="${vault_address}/v1/cubbyhole/"

echo -n 'get existing secrets: '
if output="$(curl --header  "X-Vault-Token: ${root_token}"      \
                  --request LIST                                \
                  --show-error                                  \
                  --silent                                      \
                  "${full_url}" 2>&1)"
then
    if [ -z "$(jq -r "${jq_err}" <<< "${output}")" ]
    then
        echo 'OK'
        exist_secrets_json="${output}"
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# sample response with no existing secrets:
# {
#   "errors": []
# }
#
# sample response with one existing secret:
# {
#   "request_id": "fc613730-feb9-f2e7-eb29-8c5db9accd67",
#   "lease_id": "",
#   "renewable": false,
#   "lease_duration": 0,
#   "data": {
#     "keys": [
#       "gitlab_registry_credentials"
#     ]
#   },
#   "wrap_info": null,
#   "warnings": null,
#   "auth": null
# }

jq_expr='if .data.keys then .data.keys[] else empty end'
exist_secrets="$(jq -r "${jq_expr}" <<< "${exist_secrets_json}")"

# TODO: what to do with existing secrets ? use PUT instead of POST ?

echo 'process secrets configurations:'

for secret_path in ${secret_paths}
do
    echo "  ${secret_path}:"

    jq_expr=".[] | select(.path == \"${secret_path}\")"
    secret_conf="$(jq "${jq_expr}" <<< "${secrets}")"

    # NOTE: need to use alternate notation due to leading $
    file_ref="$(jq -r '.["$ref"]' <<< "${secret_conf}")"
    path_to_secrets_file="${path_to_sec_loc}/${secrets_folder}/${file_ref}"

    if [ ! -e "${path_to_secrets_file}" ]
    then
        echo '    secrets file does not exist; not uploaded:'
        echo "    ${path_to_secrets_file}"
        continue
    fi

    echo -n '    load secrets file: '
    if output="$(yq read "${path_to_secrets_file}" --tojson 2>&1)"
    then
        echo 'OK'
        secrets_json="${output}"
    else
        echo 'ERROR'
        echo "      ${output}"
        exit 1
    fi

    echo -n '    upload secrets: '

    full_url="${vault_address}/v1/${secret_path}"
    if output="$(curl --data    "${secrets_json}"               \
                      --header  "X-Vault-Token: ${root_token}"  \
                      --request POST                            \
                      --show-error                              \
                      --silent                                  \
                      "${full_url}" 2>&1)"
    then
        if [ -z "$(jq -r "${jq_err}" <<< "${output}")" ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "${output}"
            return 1
        fi
    else
        echo 'ERROR'
        echo "        ${output}"
        return 1
    fi
done


echo
echo 'HashiCorp Vault secrets upload complete'
echo
