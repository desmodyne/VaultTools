#!/usr/bin/env bash

# dd-vt-upload-secrets
#
# create secrets on the vault server
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-22


# https://www.vaultproject.io/docs/commands/write.html
# https://www.vaultproject.io/intro/getting-started/first-secret.html

# NOTE: see also dd-vt-init-vault


echo
echo 'Upload HashiCorp Vault secrets'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# absolute path to VaultLib library file
path_to_vaultlib="${here}/dd-vt-vault.lib"

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'jq' 'vault' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=("${here}")


# -----------------------------------------------------------------------------
# load BashLib and VaultLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
if output="$(source "${path_to_vaultlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_vaultlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# conf_file is defined by get_conf_file_arg
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract script configuration attributes: '
for attr in key_file_name path_to_sec_loc placeholder \
            secrets secrets_folder vault_address
do
    # https://unix.stackexchange.com/a/68349
    declare "${attr}"="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/41418
    if [ -z "${!attr}" ] || [ "${!attr}" = 'null' ]
    then
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'


# TODO: review jq exprs to make these scalable beyond one path

# json data structure with secrets for each service
serv_secrets="$(jq '.[] | select(.context=="service")' <<< "${secrets}")"

# json data structure with secrets for each user
user_secrets="$(jq '.[] | select(.context=="user")'    <<< "${secrets}")"


# -----------------------------------------------------------------------------
# validate configuration and folder at secure location
# TODO: really do these both in every sub script ?
if ! validate_config_settings;      then exit 1; fi
if ! validate_secure_location;      then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# full path to file with key and token info
# shellcheck disable=SC2154
path_to_key_file="${path_to_sec_loc}/${key_file_name}"

# (extended) regex to match integer or float strings
# TODO: take locale into account ? (SRSLY ?!?)
re_number='^[0-9]+(.?[0-9])+$'


# -----------------------------------------------------------------------------
get_vault_status
res=$?
case "${res}" in
    0)  #
        ;;
    1)  # error message is displayed by get_vault_status
        ;;
    2)  echo "vault at ${vault_address} is sealed; please unseal and try again"
        ;;
    3)  echo "vault at ${vault_address} is not yet initialized"
        ;;
esac

if [ "${res}" != 0 ]
then
    exit "${res}"
fi


# -----------------------------------------------------------------------------
# upload secrets

# https://www.vaultproject.io/api/secret/kv/index.html

# TODO: only do this if any services or users are configured

root_token="$(jq -r '.root_token' "${path_to_key_file}")"

echo -n 'log into vault: '
if output="$(vault login -address="${vault_address}" "${root_token}" 2>&1)"
then
    echo 'OK'
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# TODO: remove code duplication

if [ -z "${serv_secrets}" ]
then
    echo 'no services configured; skip uploading service policy files'
else
    serv_names="$(jq -r '.sec_confs[].path' <<< "${serv_secrets}" | xargs)"
fi

for serv_name in ${serv_names}
do
    echo "service ${serv_name}:"

    # TODO: do not hard-code file suffix
    # TODO: really mix service and user secret files in the same folder ?
    path_to_conf_file="${path_to_sec_loc}/${secrets_folder}/${serv_name}.yaml"

    if [ ! -e "${path_to_conf_file}" ]
    then
        echo '  secrets configuration file does not exist; not uploaded:'
        echo "  ${path_to_conf_file}"
        continue
    fi

    # load entire service secrets conf file
    # NOTE: yq does return json, but in jq "entries" format
    jq_expr='.[] | from_entries | .secrets = (.secrets | from_entries)'

    echo -n '  get service secrets configuration: '
    if output="$(yq -j r "${path_to_conf_file}" 2>&1 | jq "${jq_expr}" 2>&1)"
    then
        echo 'OK'
        secrets_conf="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        continue
    fi

    paths="$(jq -r '.path' <<< "${secrets_conf}")"

    for path in ${paths}
    do
        # TODO: is it safe to show paths in output ?
        echo "  path ${path}: "

        echo '    verify secrets configuration: '

        jq_expr="select(.path == \"${path}\").secrets"
        secrets="$(jq -r "${jq_expr}" <<< "${secrets_conf}")"

        unset_secrets=false
        OLD_IFS="${IFS}" && IFS=$'\n'

        # verify all secrets were changed after file was generated
        # https://ilya-sher.org/2016/05/11/most-jq-you-will-ever-need
        #  --> search for 'Do something with each object'
        # NOTE: while loop as on page above, unset_secrets is not set
        json_lines="$(jq -c 'to_entries[]' <<< "${secrets}")"
        for json_line in ${json_lines}
        do
            key="$(  jq -r '.key'   <<< "${json_line}")"
            value="$(jq -r '.value' <<< "${json_line}")"

            echo -n "      ${path}/${key}: "
            if [ "${value}" != "${placeholder}" ] && \
               [ "${value}" != 'null' ] &&  [ -n "${value}" ]
            then
                echo 'OK'
            else
                echo 'FAIL'
                echo "      secret has not been set; not uploaded"
                unset_secrets=true
                break
            fi

            # need to re-quote integer or float secret values:
            # https://github.com/hashicorp/vault/issues/4912
            if "${grep}" -E -q "${re_number}" <<< "${value}"
            then
                secrets="$(jq ".${key} = \"${value}\"" <<< "${secrets}")"
            fi
        done

        IFS="${OLD_IFS}"

        if [ "${unset_secrets}" = true ]
        then
            continue
        fi

        echo -n '  upload secrets: '

        full_url="${vault_address}/v1/${path}"

        if output="$(curl --data   "${secrets}"                   \
                          --header "X-Vault-Token: ${root_token}" \
                          --request POST                          \
                          --show-error                            \
                          --silent                                \
                          "${full_url}" 2>&1)"
        then
            # if successful, curl returns 0 and output is empty
            if [ -z "${output}" ]
            then
                echo 'OK'
                echo "secrets uploaded to ${full_url}"
            else
                echo 'ERROR'
                # sample output:
                # {"errors":["1 error occurred:\n\n* permission denied"]}
                if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
                then
                    echo "${errors}"
                else
                    echo "${output}"
                fi
                exit 1
            fi
        else
            echo 'ERROR'
            echo "  ${output}"
            exit 1
        fi
    done
done


if [ -z "${user_secrets}" ]
then
    echo 'no users configured; skip uploading user secrets files'
else
    user_names="$(jq -r '.sec_confs[].path' <<< "${user_secrets}" | xargs)"
fi

for user_name in ${user_names}
do
    echo "user ${user_name}:"

    # TODO: do not hard-code file suffix
    path_to_conf_file="${path_to_sec_loc}/${secrets_folder}/${user_name}.yaml"

    if [ ! -e "${path_to_conf_file}" ]
    then
        echo '  secrets configuration file does not exist; not uploaded:'
        echo "  ${path_to_conf_file}"
        continue
    fi

    # load entire user secrets conf file
    # NOTE: yq does return json, but in jq "entries" format
    jq_expr='.[] | from_entries | .secrets = (.secrets | from_entries)'

    echo -n '  get user secrets configuration: '
    if output="$(yq -j r "${path_to_conf_file}" 2>&1 | jq "${jq_expr}" 2>&1)"
    then
        echo 'OK'
        secrets_conf="${output}"
    else
        echo 'ERROR'
        echo "  ${output}"
        continue
    fi

    paths="$(jq -r '.path' <<< "${secrets_conf}")"

    for path in ${paths}
    do
        # TODO: is it safe to show paths in output ?
        echo -n "  path ${path}: "

        jq_expr="select(.path == \"${path}\").secrets"
        secrets="$(jq -r "${jq_expr}" <<< "${secrets_conf}")"

        unset_secrets=false
        OLD_IFS="${IFS}" && IFS=$'\n'

        # verify all secrets were changed after file was generated
        # https://ilya-sher.org/2016/05/11/most-jq-you-will-ever-need
        #  --> search for 'Do something with each object'
        # NOTE: while loop as on page above, unset_secrets is not set
        json_lines="$(jq -c 'to_entries[]' <<< "${secrets}")"
        for json_line in ${json_lines}
        do
            key="$(  jq -r '.key'   <<< "${json_line}")"
            value="$(jq -r '.value' <<< "${json_line}")"
            if [ "${value}" = "${placeholder}" ]
            then
                echo 'ERROR'
                echo "  secret ${path}/${key} has not been set; not uploaded"
                unset_secrets=true
                break
            fi
        done

        IFS="${OLD_IFS}"

        if [ "${unset_secrets}" = true ]
        then
            continue
        fi

        if output="$(curl --data   "${secrets}"                   \
                          --header "X-Vault-Token: ${root_token}" \
                          --request POST                          \
                          --show-error                            \
                          --silent                                \
                          "${vault_address}/v1/${path}" 2>&1)"
        then
            # if successful, curl returns 0 and output is empty
            if [ -z "${output}" ]
            then
                echo 'OK'
            else
                echo 'ERROR'
                # sample output:
                # {"errors":["1 error occurred:\n\n* permission denied"]}
                if errors="$(jq -r '.errors[]' <<< "${output}" 2>&1)"
                then
                    echo "${errors}"
                else
                    echo "${output}"
                fi
                exit 1
            fi
        else
            echo 'ERROR'
            echo "  ${output}"
            exit 1
        fi
    done
done


echo
echo 'HashiCorp Vault secrets upload complete'
echo
