#!/usr/bin/env bash

# dd-vt-build-vault
#
# initialize and configure a vault instance and add users, policies and secrets
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-02-23


echo
echo 'Build HashiCorp Vault instance'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
path_to_this_script="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# alphabetical list of tools called by this script
req_tools='dd-vt-configure-vault dd-vt-init-vault undd-vt-seal-vault '
req_tools+='dd-vt-create-policies-files dd-vt-create-secrets-files dd-vt-create-users-files '
req_tools+='dd-vt-set-up-auth-approles dd-vt-set-up-auth-userpass '
req_tools+='dd-vt-upload-policies dd-vt-upload-secrets'


# -----------------------------------------------------------------------------
# load functions from library and run as appropriate

# TODO: review this
# TODO: also do this wherever else dd-vt-vault.lib is sourced (?)
if   [ -e dd-vt-vault.lib ]
then
    source dd-vt-vault.lib
elif [ -e /vault/scripts/dd-vt-vault.lib ]
then
    source /vault/scripts/dd-vt-vault.lib
fi

if ! determine_platform;            then exit 1; fi
# pass all arguments to this script
# on to sub script unchanged:
# https://stackoverflow.com/a/3816747
if ! proc_cmd_line_args "$@";       then exit 1; fi
if ! determine_path_to_sub_scripts; then exit 1; fi


# -----------------------------------------------------------------------------
# call the other scripts in the designated order

# TODO: review error handling (use trap with error function ?)
# TODO: must a vault be unsealed for setup ?
# TODO: with a new vault and a clean repo, this script should run without error
# TODO: set up global convention if cURL / REST API ./. command line client
# TODO: globally, use root token only where absolutely required:
# https://www.vaultproject.io/guides/identity/authentication.html#policy-requirements
# TODO: for all scripts that log into vault: revoke root token afterwards
# TODO: set up unit-testing:
# https://medium.com/@pimterry/testing-your-shell-scripts-with-bats-abfca9bdc5b9
# TODO: refactor various template approaches to using jq:
# https://github.com/stedolan/jq/wiki/Cookbook#using-jq-variables-as-template-variables
# TODO: streamline adding new users:
#  + call file generation scripts from dd-vt-build-vault
#  + overwrite existing files only if some cmd line flag is passed
#  + generate passwords instead of using placeholder (unless cmd line param)
#  + get list of users from Ansible playbook configuration
#  + same for PKI: overwrite existing files only if cmd line flag is passed
#  + refine git check to support generating all files for one user
# TODO: run dd-vt-clear-vault and dd-vt-seal-vault as part of this ?
# TODO: get SSH keys from vault instead of generating them out of tool
# TODO: fix shellcheck messages


if ! dd-vt-init-vault            "${config_file}"; then exit 1; fi
if ! undd-vt-seal-vault          "${config_file}"; then exit 1; fi
if ! dd-vt-configure-vault       "${config_file}"; then exit 1; fi
if ! dd-vt-create-users-files    "${config_file}"; then exit 1; fi
if ! dd-vt-create-policies-files "${config_file}"; then exit 1; fi
if ! dd-vt-create-secrets-files  "${config_file}"; then exit 1; fi
if ! dd-vt-upload-policies       "${config_file}"; then exit 1; fi
if ! dd-vt-upload-secrets        "${config_file}"; then exit 1; fi
if ! dd-vt-set-up-auth-approles  "${config_file}"; then exit 1; fi
if ! dd-vt-set-up-auth-userpass  "${config_file}"; then exit 1; fi


echo
echo 'HashiCorp Vault instance build complete'
echo

# https://stackoverflow.com/a/25518345
# TODO: remove this once development is complete
if [ -f /.dockerenv ]
then
    echo 'Keep container running for inspection'
    tail -f /dev/null
fi
